/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.afarcloud.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-9-30")
public class SemanticQueryService {

  public interface Iface {

    public List<Vehicle> getAllVehicles() throws TException;

    public List<MissionTag> getAllMissions() throws TException;

    public List<MissionTag> getOngoingMissions() throws TException;

    public Vehicle getVehicle(int vid) throws TException;

    public void queryStateVector(int requestId, int vehicleId, int startTime, int endTime) throws TException;

    public void querySensorData(int requestId, Region region, int startTime, int endTime, SensorType sensorType) throws TException;

    public void queryHistoricalStateVectors(int requestId, int vehicleId, int startTime, int endTime) throws TException;

    public void queryHistoricalSensorData(int requestId, Region region, int startTime, int endTime, SensorType sensorType) throws TException;

    public List<SensorData> querySensorLastData(int requestId, Region region, int startTime, int endTime, SensorType sensorType) throws TException;

    public void storeEvent(int requestId, int missionId, int vehicleId, int subtype, String description, long timeReference) throws TException;

    public String ping() throws TException;

  }

  public interface AsyncIface {

    public void getAllVehicles(AsyncMethodCallback resultHandler) throws TException;

    public void getAllMissions(AsyncMethodCallback resultHandler) throws TException;

    public void getOngoingMissions(AsyncMethodCallback resultHandler) throws TException;

    public void getVehicle(int vid, AsyncMethodCallback resultHandler) throws TException;

    public void queryStateVector(int requestId, int vehicleId, int startTime, int endTime, AsyncMethodCallback resultHandler) throws TException;

    public void querySensorData(int requestId, Region region, int startTime, int endTime, SensorType sensorType, AsyncMethodCallback resultHandler) throws TException;

    public void queryHistoricalStateVectors(int requestId, int vehicleId, int startTime, int endTime, AsyncMethodCallback resultHandler) throws TException;

    public void queryHistoricalSensorData(int requestId, Region region, int startTime, int endTime, SensorType sensorType, AsyncMethodCallback resultHandler) throws TException;

    public void querySensorLastData(int requestId, Region region, int startTime, int endTime, SensorType sensorType, AsyncMethodCallback resultHandler) throws TException;

    public void storeEvent(int requestId, int missionId, int vehicleId, int subtype, String description, long timeReference, AsyncMethodCallback resultHandler) throws TException;

    public void ping(AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<Vehicle> getAllVehicles() throws TException
    {
      send_getAllVehicles();
      return recv_getAllVehicles();
    }

    public void send_getAllVehicles() throws TException
    {
      getAllVehicles_args args = new getAllVehicles_args();
      sendBase("getAllVehicles", args);
    }

    public List<Vehicle> recv_getAllVehicles() throws TException
    {
      getAllVehicles_result result = new getAllVehicles_result();
      receiveBase(result, "getAllVehicles");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllVehicles failed: unknown result");
    }

    public List<MissionTag> getAllMissions() throws TException
    {
      send_getAllMissions();
      return recv_getAllMissions();
    }

    public void send_getAllMissions() throws TException
    {
      getAllMissions_args args = new getAllMissions_args();
      sendBase("getAllMissions", args);
    }

    public List<MissionTag> recv_getAllMissions() throws TException
    {
      getAllMissions_result result = new getAllMissions_result();
      receiveBase(result, "getAllMissions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllMissions failed: unknown result");
    }

    public List<MissionTag> getOngoingMissions() throws TException
    {
      send_getOngoingMissions();
      return recv_getOngoingMissions();
    }

    public void send_getOngoingMissions() throws TException
    {
      getOngoingMissions_args args = new getOngoingMissions_args();
      sendBase("getOngoingMissions", args);
    }

    public List<MissionTag> recv_getOngoingMissions() throws TException
    {
      getOngoingMissions_result result = new getOngoingMissions_result();
      receiveBase(result, "getOngoingMissions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOngoingMissions failed: unknown result");
    }

    public Vehicle getVehicle(int vid) throws TException
    {
      send_getVehicle(vid);
      return recv_getVehicle();
    }

    public void send_getVehicle(int vid) throws TException
    {
      getVehicle_args args = new getVehicle_args();
      args.setVid(vid);
      sendBase("getVehicle", args);
    }

    public Vehicle recv_getVehicle() throws TException
    {
      getVehicle_result result = new getVehicle_result();
      receiveBase(result, "getVehicle");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVehicle failed: unknown result");
    }

    public void queryStateVector(int requestId, int vehicleId, int startTime, int endTime) throws TException
    {
      send_queryStateVector(requestId, vehicleId, startTime, endTime);
    }

    public void send_queryStateVector(int requestId, int vehicleId, int startTime, int endTime) throws TException
    {
      queryStateVector_args args = new queryStateVector_args();
      args.setRequestId(requestId);
      args.setVehicleId(vehicleId);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("queryStateVector", args);
    }

    public void querySensorData(int requestId, Region region, int startTime, int endTime, SensorType sensorType) throws TException
    {
      send_querySensorData(requestId, region, startTime, endTime, sensorType);
    }

    public void send_querySensorData(int requestId, Region region, int startTime, int endTime, SensorType sensorType) throws TException
    {
      querySensorData_args args = new querySensorData_args();
      args.setRequestId(requestId);
      args.setRegion(region);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      args.setSensorType(sensorType);
      sendBase("querySensorData", args);
    }

    public void queryHistoricalStateVectors(int requestId, int vehicleId, int startTime, int endTime) throws TException
    {
      send_queryHistoricalStateVectors(requestId, vehicleId, startTime, endTime);
    }

    public void send_queryHistoricalStateVectors(int requestId, int vehicleId, int startTime, int endTime) throws TException
    {
      queryHistoricalStateVectors_args args = new queryHistoricalStateVectors_args();
      args.setRequestId(requestId);
      args.setVehicleId(vehicleId);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("queryHistoricalStateVectors", args);
    }

    public void queryHistoricalSensorData(int requestId, Region region, int startTime, int endTime, SensorType sensorType) throws TException
    {
      send_queryHistoricalSensorData(requestId, region, startTime, endTime, sensorType);
    }

    public void send_queryHistoricalSensorData(int requestId, Region region, int startTime, int endTime, SensorType sensorType) throws TException
    {
      queryHistoricalSensorData_args args = new queryHistoricalSensorData_args();
      args.setRequestId(requestId);
      args.setRegion(region);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      args.setSensorType(sensorType);
      sendBase("queryHistoricalSensorData", args);
    }

    public List<SensorData> querySensorLastData(int requestId, Region region, int startTime, int endTime, SensorType sensorType) throws TException
    {
      send_querySensorLastData(requestId, region, startTime, endTime, sensorType);
      return recv_querySensorLastData();
    }

    public void send_querySensorLastData(int requestId, Region region, int startTime, int endTime, SensorType sensorType) throws TException
    {
      querySensorLastData_args args = new querySensorLastData_args();
      args.setRequestId(requestId);
      args.setRegion(region);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      args.setSensorType(sensorType);
      sendBase("querySensorLastData", args);
    }

    public List<SensorData> recv_querySensorLastData() throws TException
    {
      querySensorLastData_result result = new querySensorLastData_result();
      receiveBase(result, "querySensorLastData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySensorLastData failed: unknown result");
    }

    public void storeEvent(int requestId, int missionId, int vehicleId, int subtype, String description, long timeReference) throws TException
    {
      send_storeEvent(requestId, missionId, vehicleId, subtype, description, timeReference);
    }

    public void send_storeEvent(int requestId, int missionId, int vehicleId, int subtype, String description, long timeReference) throws TException
    {
      storeEvent_args args = new storeEvent_args();
      args.setRequestId(requestId);
      args.setMissionId(missionId);
      args.setVehicleId(vehicleId);
      args.setSubtype(subtype);
      args.setDescription(description);
      args.setTimeReference(timeReference);
      sendBase("storeEvent", args);
    }

    public String ping() throws TException
    {
      send_ping();
      return recv_ping();
    }

    public void send_ping() throws TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public String recv_ping() throws TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAllVehicles(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getAllVehicles_call method_call = new getAllVehicles_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllVehicles_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getAllVehicles_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllVehicles", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllVehicles_args args = new getAllVehicles_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Vehicle> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllVehicles();
      }
    }

    public void getAllMissions(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getAllMissions_call method_call = new getAllMissions_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllMissions_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getAllMissions_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllMissions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllMissions_args args = new getAllMissions_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<MissionTag> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllMissions();
      }
    }

    public void getOngoingMissions(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getOngoingMissions_call method_call = new getOngoingMissions_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOngoingMissions_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getOngoingMissions_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOngoingMissions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOngoingMissions_args args = new getOngoingMissions_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<MissionTag> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOngoingMissions();
      }
    }

    public void getVehicle(int vid, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getVehicle_call method_call = new getVehicle_call(vid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVehicle_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vid;
      public getVehicle_call(int vid, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vid = vid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVehicle", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVehicle_args args = new getVehicle_args();
        args.setVid(vid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Vehicle getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVehicle();
      }
    }

    public void queryStateVector(int requestId, int vehicleId, int startTime, int endTime, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      queryStateVector_call method_call = new queryStateVector_call(requestId, vehicleId, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryStateVector_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int vehicleId;
      private int startTime;
      private int endTime;
      public queryStateVector_call(int requestId, int vehicleId, int startTime, int endTime, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.requestId = requestId;
        this.vehicleId = vehicleId;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryStateVector", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        queryStateVector_args args = new queryStateVector_args();
        args.setRequestId(requestId);
        args.setVehicleId(vehicleId);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void querySensorData(int requestId, Region region, int startTime, int endTime, SensorType sensorType, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      querySensorData_call method_call = new querySensorData_call(requestId, region, startTime, endTime, sensorType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private Region region;
      private int startTime;
      private int endTime;
      private SensorType sensorType;
      public querySensorData_call(int requestId, Region region, int startTime, int endTime, SensorType sensorType, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.requestId = requestId;
        this.region = region;
        this.startTime = startTime;
        this.endTime = endTime;
        this.sensorType = sensorType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorData", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        querySensorData_args args = new querySensorData_args();
        args.setRequestId(requestId);
        args.setRegion(region);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.setSensorType(sensorType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void queryHistoricalStateVectors(int requestId, int vehicleId, int startTime, int endTime, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      queryHistoricalStateVectors_call method_call = new queryHistoricalStateVectors_call(requestId, vehicleId, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryHistoricalStateVectors_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int vehicleId;
      private int startTime;
      private int endTime;
      public queryHistoricalStateVectors_call(int requestId, int vehicleId, int startTime, int endTime, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.requestId = requestId;
        this.vehicleId = vehicleId;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryHistoricalStateVectors", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        queryHistoricalStateVectors_args args = new queryHistoricalStateVectors_args();
        args.setRequestId(requestId);
        args.setVehicleId(vehicleId);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void queryHistoricalSensorData(int requestId, Region region, int startTime, int endTime, SensorType sensorType, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      queryHistoricalSensorData_call method_call = new queryHistoricalSensorData_call(requestId, region, startTime, endTime, sensorType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryHistoricalSensorData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private Region region;
      private int startTime;
      private int endTime;
      private SensorType sensorType;
      public queryHistoricalSensorData_call(int requestId, Region region, int startTime, int endTime, SensorType sensorType, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.requestId = requestId;
        this.region = region;
        this.startTime = startTime;
        this.endTime = endTime;
        this.sensorType = sensorType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryHistoricalSensorData", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        queryHistoricalSensorData_args args = new queryHistoricalSensorData_args();
        args.setRequestId(requestId);
        args.setRegion(region);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.setSensorType(sensorType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void querySensorLastData(int requestId, Region region, int startTime, int endTime, SensorType sensorType, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      querySensorLastData_call method_call = new querySensorLastData_call(requestId, region, startTime, endTime, sensorType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorLastData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private Region region;
      private int startTime;
      private int endTime;
      private SensorType sensorType;
      public querySensorLastData_call(int requestId, Region region, int startTime, int endTime, SensorType sensorType, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.region = region;
        this.startTime = startTime;
        this.endTime = endTime;
        this.sensorType = sensorType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorLastData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySensorLastData_args args = new querySensorLastData_args();
        args.setRequestId(requestId);
        args.setRegion(region);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.setSensorType(sensorType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SensorData> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySensorLastData();
      }
    }

    public void storeEvent(int requestId, int missionId, int vehicleId, int subtype, String description, long timeReference, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      storeEvent_call method_call = new storeEvent_call(requestId, missionId, vehicleId, subtype, description, timeReference, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int missionId;
      private int vehicleId;
      private int subtype;
      private String description;
      private long timeReference;
      public storeEvent_call(int requestId, int missionId, int vehicleId, int subtype, String description, long timeReference, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.requestId = requestId;
        this.missionId = missionId;
        this.vehicleId = vehicleId;
        this.subtype = subtype;
        this.description = description;
        this.timeReference = timeReference;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeEvent", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        storeEvent_args args = new storeEvent_args();
        args.setRequestId(requestId);
        args.setMissionId(missionId);
        args.setVehicleId(vehicleId);
        args.setSubtype(subtype);
        args.setDescription(description);
        args.setTimeReference(timeReference);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void ping(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      public ping_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAllVehicles", new getAllVehicles());
      processMap.put("getAllMissions", new getAllMissions());
      processMap.put("getOngoingMissions", new getOngoingMissions());
      processMap.put("getVehicle", new getVehicle());
      processMap.put("queryStateVector", new queryStateVector());
      processMap.put("querySensorData", new querySensorData());
      processMap.put("queryHistoricalStateVectors", new queryHistoricalStateVectors());
      processMap.put("queryHistoricalSensorData", new queryHistoricalSensorData());
      processMap.put("querySensorLastData", new querySensorLastData());
      processMap.put("storeEvent", new storeEvent());
      processMap.put("ping", new ping());
      return processMap;
    }

    public static class getAllVehicles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllVehicles_args> {
      public getAllVehicles() {
        super("getAllVehicles");
      }

      public getAllVehicles_args getEmptyArgsInstance() {
        return new getAllVehicles_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllVehicles_result getResult(I iface, getAllVehicles_args args) throws TException {
        getAllVehicles_result result = new getAllVehicles_result();
        result.success = iface.getAllVehicles();
        return result;
      }
    }

    public static class getAllMissions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllMissions_args> {
      public getAllMissions() {
        super("getAllMissions");
      }

      public getAllMissions_args getEmptyArgsInstance() {
        return new getAllMissions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllMissions_result getResult(I iface, getAllMissions_args args) throws TException {
        getAllMissions_result result = new getAllMissions_result();
        result.success = iface.getAllMissions();
        return result;
      }
    }

    public static class getOngoingMissions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOngoingMissions_args> {
      public getOngoingMissions() {
        super("getOngoingMissions");
      }

      public getOngoingMissions_args getEmptyArgsInstance() {
        return new getOngoingMissions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOngoingMissions_result getResult(I iface, getOngoingMissions_args args) throws TException {
        getOngoingMissions_result result = new getOngoingMissions_result();
        result.success = iface.getOngoingMissions();
        return result;
      }
    }

    public static class getVehicle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVehicle_args> {
      public getVehicle() {
        super("getVehicle");
      }

      public getVehicle_args getEmptyArgsInstance() {
        return new getVehicle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVehicle_result getResult(I iface, getVehicle_args args) throws TException {
        getVehicle_result result = new getVehicle_result();
        result.success = iface.getVehicle(args.vid);
        return result;
      }
    }

    public static class queryStateVector<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryStateVector_args> {
      public queryStateVector() {
        super("queryStateVector");
      }

      public queryStateVector_args getEmptyArgsInstance() {
        return new queryStateVector_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, queryStateVector_args args) throws TException {
        iface.queryStateVector(args.requestId, args.vehicleId, args.startTime, args.endTime);
        return null;
      }
    }

    public static class querySensorData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorData_args> {
      public querySensorData() {
        super("querySensorData");
      }

      public querySensorData_args getEmptyArgsInstance() {
        return new querySensorData_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, querySensorData_args args) throws TException {
        iface.querySensorData(args.requestId, args.region, args.startTime, args.endTime, args.sensorType);
        return null;
      }
    }

    public static class queryHistoricalStateVectors<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryHistoricalStateVectors_args> {
      public queryHistoricalStateVectors() {
        super("queryHistoricalStateVectors");
      }

      public queryHistoricalStateVectors_args getEmptyArgsInstance() {
        return new queryHistoricalStateVectors_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, queryHistoricalStateVectors_args args) throws TException {
        iface.queryHistoricalStateVectors(args.requestId, args.vehicleId, args.startTime, args.endTime);
        return null;
      }
    }

    public static class queryHistoricalSensorData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryHistoricalSensorData_args> {
      public queryHistoricalSensorData() {
        super("queryHistoricalSensorData");
      }

      public queryHistoricalSensorData_args getEmptyArgsInstance() {
        return new queryHistoricalSensorData_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, queryHistoricalSensorData_args args) throws TException {
        iface.queryHistoricalSensorData(args.requestId, args.region, args.startTime, args.endTime, args.sensorType);
        return null;
      }
    }

    public static class querySensorLastData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorLastData_args> {
      public querySensorLastData() {
        super("querySensorLastData");
      }

      public querySensorLastData_args getEmptyArgsInstance() {
        return new querySensorLastData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySensorLastData_result getResult(I iface, querySensorLastData_args args) throws TException {
        querySensorLastData_result result = new querySensorLastData_result();
        result.success = iface.querySensorLastData(args.requestId, args.region, args.startTime, args.endTime, args.sensorType);
        return result;
      }
    }

    public static class storeEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeEvent_args> {
      public storeEvent() {
        super("storeEvent");
      }

      public storeEvent_args getEmptyArgsInstance() {
        return new storeEvent_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, storeEvent_args args) throws TException {
        iface.storeEvent(args.requestId, args.missionId, args.vehicleId, args.subtype, args.description, args.timeReference);
        return null;
      }
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws TException {
        ping_result result = new ping_result();
        result.success = iface.ping();
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getAllVehicles", new getAllVehicles());
      processMap.put("getAllMissions", new getAllMissions());
      processMap.put("getOngoingMissions", new getOngoingMissions());
      processMap.put("getVehicle", new getVehicle());
      processMap.put("queryStateVector", new queryStateVector());
      processMap.put("querySensorData", new querySensorData());
      processMap.put("queryHistoricalStateVectors", new queryHistoricalStateVectors());
      processMap.put("queryHistoricalSensorData", new queryHistoricalSensorData());
      processMap.put("querySensorLastData", new querySensorLastData());
      processMap.put("storeEvent", new storeEvent());
      processMap.put("ping", new ping());
      return processMap;
    }

    public static class getAllVehicles<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllVehicles_args, List<Vehicle>> {
      public getAllVehicles() {
        super("getAllVehicles");
      }

      public getAllVehicles_args getEmptyArgsInstance() {
        return new getAllVehicles_args();
      }

      public AsyncMethodCallback<List<Vehicle>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Vehicle>>() { 
          public void onComplete(List<Vehicle> o) {
            getAllVehicles_result result = new getAllVehicles_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllVehicles_result result = new getAllVehicles_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllVehicles_args args, AsyncMethodCallback<List<Vehicle>> resultHandler) throws TException {
        iface.getAllVehicles(resultHandler);
      }
    }

    public static class getAllMissions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllMissions_args, List<MissionTag>> {
      public getAllMissions() {
        super("getAllMissions");
      }

      public getAllMissions_args getEmptyArgsInstance() {
        return new getAllMissions_args();
      }

      public AsyncMethodCallback<List<MissionTag>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<MissionTag>>() { 
          public void onComplete(List<MissionTag> o) {
            getAllMissions_result result = new getAllMissions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllMissions_result result = new getAllMissions_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllMissions_args args, AsyncMethodCallback<List<MissionTag>> resultHandler) throws TException {
        iface.getAllMissions(resultHandler);
      }
    }

    public static class getOngoingMissions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOngoingMissions_args, List<MissionTag>> {
      public getOngoingMissions() {
        super("getOngoingMissions");
      }

      public getOngoingMissions_args getEmptyArgsInstance() {
        return new getOngoingMissions_args();
      }

      public AsyncMethodCallback<List<MissionTag>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<MissionTag>>() { 
          public void onComplete(List<MissionTag> o) {
            getOngoingMissions_result result = new getOngoingMissions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOngoingMissions_result result = new getOngoingMissions_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOngoingMissions_args args, AsyncMethodCallback<List<MissionTag>> resultHandler) throws TException {
        iface.getOngoingMissions(resultHandler);
      }
    }

    public static class getVehicle<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVehicle_args, Vehicle> {
      public getVehicle() {
        super("getVehicle");
      }

      public getVehicle_args getEmptyArgsInstance() {
        return new getVehicle_args();
      }

      public AsyncMethodCallback<Vehicle> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Vehicle>() { 
          public void onComplete(Vehicle o) {
            getVehicle_result result = new getVehicle_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVehicle_result result = new getVehicle_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVehicle_args args, AsyncMethodCallback<Vehicle> resultHandler) throws TException {
        iface.getVehicle(args.vid,resultHandler);
      }
    }

    public static class queryStateVector<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryStateVector_args, Void> {
      public queryStateVector() {
        super("queryStateVector");
      }

      public queryStateVector_args getEmptyArgsInstance() {
        return new queryStateVector_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, queryStateVector_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.queryStateVector(args.requestId, args.vehicleId, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class querySensorData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorData_args, Void> {
      public querySensorData() {
        super("querySensorData");
      }

      public querySensorData_args getEmptyArgsInstance() {
        return new querySensorData_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, querySensorData_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.querySensorData(args.requestId, args.region, args.startTime, args.endTime, args.sensorType,resultHandler);
      }
    }

    public static class queryHistoricalStateVectors<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryHistoricalStateVectors_args, Void> {
      public queryHistoricalStateVectors() {
        super("queryHistoricalStateVectors");
      }

      public queryHistoricalStateVectors_args getEmptyArgsInstance() {
        return new queryHistoricalStateVectors_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, queryHistoricalStateVectors_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.queryHistoricalStateVectors(args.requestId, args.vehicleId, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class queryHistoricalSensorData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryHistoricalSensorData_args, Void> {
      public queryHistoricalSensorData() {
        super("queryHistoricalSensorData");
      }

      public queryHistoricalSensorData_args getEmptyArgsInstance() {
        return new queryHistoricalSensorData_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, queryHistoricalSensorData_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.queryHistoricalSensorData(args.requestId, args.region, args.startTime, args.endTime, args.sensorType,resultHandler);
      }
    }

    public static class querySensorLastData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorLastData_args, List<SensorData>> {
      public querySensorLastData() {
        super("querySensorLastData");
      }

      public querySensorLastData_args getEmptyArgsInstance() {
        return new querySensorLastData_args();
      }

      public AsyncMethodCallback<List<SensorData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SensorData>>() { 
          public void onComplete(List<SensorData> o) {
            querySensorLastData_result result = new querySensorLastData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySensorLastData_result result = new querySensorLastData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySensorLastData_args args, AsyncMethodCallback<List<SensorData>> resultHandler) throws TException {
        iface.querySensorLastData(args.requestId, args.region, args.startTime, args.endTime, args.sensorType,resultHandler);
      }
    }

    public static class storeEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, storeEvent_args, Void> {
      public storeEvent() {
        super("storeEvent");
      }

      public storeEvent_args getEmptyArgsInstance() {
        return new storeEvent_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, storeEvent_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.storeEvent(args.requestId, args.missionId, args.vehicleId, args.subtype, args.description, args.timeReference,resultHandler);
      }
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, String> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            ping_result result = new ping_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ping_result result = new ping_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, AsyncMethodCallback<String> resultHandler) throws TException {
        iface.ping(resultHandler);
      }
    }

  }

  public static class getAllVehicles_args implements org.apache.thrift.TBase<getAllVehicles_args, getAllVehicles_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllVehicles_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllVehicles_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllVehicles_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllVehicles_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllVehicles_args.class, metaDataMap);
    }

    public getAllVehicles_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllVehicles_args(getAllVehicles_args other) {
    }

    public getAllVehicles_args deepCopy() {
      return new getAllVehicles_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllVehicles_args)
        return this.equals((getAllVehicles_args)that);
      return false;
    }

    public boolean equals(getAllVehicles_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllVehicles_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllVehicles_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllVehicles_argsStandardSchemeFactory implements SchemeFactory {
      public getAllVehicles_argsStandardScheme getScheme() {
        return new getAllVehicles_argsStandardScheme();
      }
    }

    private static class getAllVehicles_argsStandardScheme extends StandardScheme<getAllVehicles_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllVehicles_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllVehicles_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllVehicles_argsTupleSchemeFactory implements SchemeFactory {
      public getAllVehicles_argsTupleScheme getScheme() {
        return new getAllVehicles_argsTupleScheme();
      }
    }

    private static class getAllVehicles_argsTupleScheme extends TupleScheme<getAllVehicles_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllVehicles_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllVehicles_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getAllVehicles_result implements org.apache.thrift.TBase<getAllVehicles_result, getAllVehicles_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllVehicles_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllVehicles_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllVehicles_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllVehicles_resultTupleSchemeFactory());
    }

    public List<Vehicle> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vehicle.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllVehicles_result.class, metaDataMap);
    }

    public getAllVehicles_result() {
    }

    public getAllVehicles_result(
      List<Vehicle> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllVehicles_result(getAllVehicles_result other) {
      if (other.isSetSuccess()) {
        List<Vehicle> __this__success = new ArrayList<Vehicle>(other.success.size());
        for (Vehicle other_element : other.success) {
          __this__success.add(new Vehicle(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllVehicles_result deepCopy() {
      return new getAllVehicles_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Vehicle> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Vehicle elem) {
      if (this.success == null) {
        this.success = new ArrayList<Vehicle>();
      }
      this.success.add(elem);
    }

    public List<Vehicle> getSuccess() {
      return this.success;
    }

    public getAllVehicles_result setSuccess(List<Vehicle> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Vehicle>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllVehicles_result)
        return this.equals((getAllVehicles_result)that);
      return false;
    }

    public boolean equals(getAllVehicles_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllVehicles_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllVehicles_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllVehicles_resultStandardSchemeFactory implements SchemeFactory {
      public getAllVehicles_resultStandardScheme getScheme() {
        return new getAllVehicles_resultStandardScheme();
      }
    }

    private static class getAllVehicles_resultStandardScheme extends StandardScheme<getAllVehicles_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllVehicles_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new ArrayList<Vehicle>(_list80.size);
                  Vehicle _elem81;
                  for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                  {
                    _elem81 = new Vehicle();
                    _elem81.read(iprot);
                    struct.success.add(_elem81);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllVehicles_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Vehicle _iter83 : struct.success)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllVehicles_resultTupleSchemeFactory implements SchemeFactory {
      public getAllVehicles_resultTupleScheme getScheme() {
        return new getAllVehicles_resultTupleScheme();
      }
    }

    private static class getAllVehicles_resultTupleScheme extends TupleScheme<getAllVehicles_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllVehicles_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Vehicle _iter84 : struct.success)
            {
              _iter84.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllVehicles_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Vehicle>(_list85.size);
            Vehicle _elem86;
            for (int _i87 = 0; _i87 < _list85.size; ++_i87)
            {
              _elem86 = new Vehicle();
              _elem86.read(iprot);
              struct.success.add(_elem86);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllMissions_args implements org.apache.thrift.TBase<getAllMissions_args, getAllMissions_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllMissions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllMissions_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllMissions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllMissions_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllMissions_args.class, metaDataMap);
    }

    public getAllMissions_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllMissions_args(getAllMissions_args other) {
    }

    public getAllMissions_args deepCopy() {
      return new getAllMissions_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllMissions_args)
        return this.equals((getAllMissions_args)that);
      return false;
    }

    public boolean equals(getAllMissions_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllMissions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllMissions_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllMissions_argsStandardSchemeFactory implements SchemeFactory {
      public getAllMissions_argsStandardScheme getScheme() {
        return new getAllMissions_argsStandardScheme();
      }
    }

    private static class getAllMissions_argsStandardScheme extends StandardScheme<getAllMissions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllMissions_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllMissions_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllMissions_argsTupleSchemeFactory implements SchemeFactory {
      public getAllMissions_argsTupleScheme getScheme() {
        return new getAllMissions_argsTupleScheme();
      }
    }

    private static class getAllMissions_argsTupleScheme extends TupleScheme<getAllMissions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllMissions_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllMissions_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getAllMissions_result implements org.apache.thrift.TBase<getAllMissions_result, getAllMissions_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllMissions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllMissions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllMissions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllMissions_resultTupleSchemeFactory());
    }

    public List<MissionTag> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MissionTag.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllMissions_result.class, metaDataMap);
    }

    public getAllMissions_result() {
    }

    public getAllMissions_result(
      List<MissionTag> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllMissions_result(getAllMissions_result other) {
      if (other.isSetSuccess()) {
        List<MissionTag> __this__success = new ArrayList<MissionTag>(other.success.size());
        for (MissionTag other_element : other.success) {
          __this__success.add(new MissionTag(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllMissions_result deepCopy() {
      return new getAllMissions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<MissionTag> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(MissionTag elem) {
      if (this.success == null) {
        this.success = new ArrayList<MissionTag>();
      }
      this.success.add(elem);
    }

    public List<MissionTag> getSuccess() {
      return this.success;
    }

    public getAllMissions_result setSuccess(List<MissionTag> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<MissionTag>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllMissions_result)
        return this.equals((getAllMissions_result)that);
      return false;
    }

    public boolean equals(getAllMissions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllMissions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllMissions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllMissions_resultStandardSchemeFactory implements SchemeFactory {
      public getAllMissions_resultStandardScheme getScheme() {
        return new getAllMissions_resultStandardScheme();
      }
    }

    private static class getAllMissions_resultStandardScheme extends StandardScheme<getAllMissions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllMissions_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.success = new ArrayList<MissionTag>(_list88.size);
                  MissionTag _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = new MissionTag();
                    _elem89.read(iprot);
                    struct.success.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllMissions_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (MissionTag _iter91 : struct.success)
            {
              _iter91.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllMissions_resultTupleSchemeFactory implements SchemeFactory {
      public getAllMissions_resultTupleScheme getScheme() {
        return new getAllMissions_resultTupleScheme();
      }
    }

    private static class getAllMissions_resultTupleScheme extends TupleScheme<getAllMissions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllMissions_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (MissionTag _iter92 : struct.success)
            {
              _iter92.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllMissions_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<MissionTag>(_list93.size);
            MissionTag _elem94;
            for (int _i95 = 0; _i95 < _list93.size; ++_i95)
            {
              _elem94 = new MissionTag();
              _elem94.read(iprot);
              struct.success.add(_elem94);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOngoingMissions_args implements org.apache.thrift.TBase<getOngoingMissions_args, getOngoingMissions_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOngoingMissions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOngoingMissions_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOngoingMissions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOngoingMissions_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOngoingMissions_args.class, metaDataMap);
    }

    public getOngoingMissions_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOngoingMissions_args(getOngoingMissions_args other) {
    }

    public getOngoingMissions_args deepCopy() {
      return new getOngoingMissions_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOngoingMissions_args)
        return this.equals((getOngoingMissions_args)that);
      return false;
    }

    public boolean equals(getOngoingMissions_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getOngoingMissions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOngoingMissions_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOngoingMissions_argsStandardSchemeFactory implements SchemeFactory {
      public getOngoingMissions_argsStandardScheme getScheme() {
        return new getOngoingMissions_argsStandardScheme();
      }
    }

    private static class getOngoingMissions_argsStandardScheme extends StandardScheme<getOngoingMissions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOngoingMissions_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOngoingMissions_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOngoingMissions_argsTupleSchemeFactory implements SchemeFactory {
      public getOngoingMissions_argsTupleScheme getScheme() {
        return new getOngoingMissions_argsTupleScheme();
      }
    }

    private static class getOngoingMissions_argsTupleScheme extends TupleScheme<getOngoingMissions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOngoingMissions_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOngoingMissions_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getOngoingMissions_result implements org.apache.thrift.TBase<getOngoingMissions_result, getOngoingMissions_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOngoingMissions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOngoingMissions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOngoingMissions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOngoingMissions_resultTupleSchemeFactory());
    }

    public List<MissionTag> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MissionTag.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOngoingMissions_result.class, metaDataMap);
    }

    public getOngoingMissions_result() {
    }

    public getOngoingMissions_result(
      List<MissionTag> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOngoingMissions_result(getOngoingMissions_result other) {
      if (other.isSetSuccess()) {
        List<MissionTag> __this__success = new ArrayList<MissionTag>(other.success.size());
        for (MissionTag other_element : other.success) {
          __this__success.add(new MissionTag(other_element));
        }
        this.success = __this__success;
      }
    }

    public getOngoingMissions_result deepCopy() {
      return new getOngoingMissions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<MissionTag> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(MissionTag elem) {
      if (this.success == null) {
        this.success = new ArrayList<MissionTag>();
      }
      this.success.add(elem);
    }

    public List<MissionTag> getSuccess() {
      return this.success;
    }

    public getOngoingMissions_result setSuccess(List<MissionTag> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<MissionTag>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOngoingMissions_result)
        return this.equals((getOngoingMissions_result)that);
      return false;
    }

    public boolean equals(getOngoingMissions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOngoingMissions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOngoingMissions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOngoingMissions_resultStandardSchemeFactory implements SchemeFactory {
      public getOngoingMissions_resultStandardScheme getScheme() {
        return new getOngoingMissions_resultStandardScheme();
      }
    }

    private static class getOngoingMissions_resultStandardScheme extends StandardScheme<getOngoingMissions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOngoingMissions_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.success = new ArrayList<MissionTag>(_list96.size);
                  MissionTag _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = new MissionTag();
                    _elem97.read(iprot);
                    struct.success.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOngoingMissions_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (MissionTag _iter99 : struct.success)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOngoingMissions_resultTupleSchemeFactory implements SchemeFactory {
      public getOngoingMissions_resultTupleScheme getScheme() {
        return new getOngoingMissions_resultTupleScheme();
      }
    }

    private static class getOngoingMissions_resultTupleScheme extends TupleScheme<getOngoingMissions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOngoingMissions_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (MissionTag _iter100 : struct.success)
            {
              _iter100.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOngoingMissions_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<MissionTag>(_list101.size);
            MissionTag _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = new MissionTag();
              _elem102.read(iprot);
              struct.success.add(_elem102);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getVehicle_args implements org.apache.thrift.TBase<getVehicle_args, getVehicle_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVehicle_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVehicle_args");

    private static final org.apache.thrift.protocol.TField VID_FIELD_DESC = new org.apache.thrift.protocol.TField("vid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVehicle_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVehicle_argsTupleSchemeFactory());
    }

    public int vid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VID((short)1, "vid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VID
            return VID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VID, new org.apache.thrift.meta_data.FieldMetaData("vid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVehicle_args.class, metaDataMap);
    }

    public getVehicle_args() {
    }

    public getVehicle_args(
      int vid)
    {
      this();
      this.vid = vid;
      setVidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVehicle_args(getVehicle_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vid = other.vid;
    }

    public getVehicle_args deepCopy() {
      return new getVehicle_args(this);
    }

    @Override
    public void clear() {
      setVidIsSet(false);
      this.vid = 0;
    }

    public int getVid() {
      return this.vid;
    }

    public getVehicle_args setVid(int vid) {
      this.vid = vid;
      setVidIsSet(true);
      return this;
    }

    public void unsetVid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VID_ISSET_ID);
    }

    /** Returns true if field vid is set (has been assigned a value) and false otherwise */
    public boolean isSetVid() {
      return EncodingUtils.testBit(__isset_bitfield, __VID_ISSET_ID);
    }

    public void setVidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VID:
        if (value == null) {
          unsetVid();
        } else {
          setVid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VID:
        return Integer.valueOf(getVid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VID:
        return isSetVid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVehicle_args)
        return this.equals((getVehicle_args)that);
      return false;
    }

    public boolean equals(getVehicle_args that) {
      if (that == null)
        return false;

      boolean this_present_vid = true;
      boolean that_present_vid = true;
      if (this_present_vid || that_present_vid) {
        if (!(this_present_vid && that_present_vid))
          return false;
        if (this.vid != that.vid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vid = true;
      list.add(present_vid);
      if (present_vid)
        list.add(vid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVehicle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVid()).compareTo(other.isSetVid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vid, other.vid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVehicle_args(");
      boolean first = true;

      sb.append("vid:");
      sb.append(this.vid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVehicle_argsStandardSchemeFactory implements SchemeFactory {
      public getVehicle_argsStandardScheme getScheme() {
        return new getVehicle_argsStandardScheme();
      }
    }

    private static class getVehicle_argsStandardScheme extends StandardScheme<getVehicle_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVehicle_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vid = iprot.readI32();
                struct.setVidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVehicle_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VID_FIELD_DESC);
        oprot.writeI32(struct.vid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVehicle_argsTupleSchemeFactory implements SchemeFactory {
      public getVehicle_argsTupleScheme getScheme() {
        return new getVehicle_argsTupleScheme();
      }
    }

    private static class getVehicle_argsTupleScheme extends TupleScheme<getVehicle_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVehicle_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVid()) {
          oprot.writeI32(struct.vid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVehicle_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vid = iprot.readI32();
          struct.setVidIsSet(true);
        }
      }
    }

  }

  public static class getVehicle_result implements org.apache.thrift.TBase<getVehicle_result, getVehicle_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVehicle_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVehicle_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVehicle_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVehicle_resultTupleSchemeFactory());
    }

    public Vehicle success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vehicle.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVehicle_result.class, metaDataMap);
    }

    public getVehicle_result() {
    }

    public getVehicle_result(
      Vehicle success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVehicle_result(getVehicle_result other) {
      if (other.isSetSuccess()) {
        this.success = new Vehicle(other.success);
      }
    }

    public getVehicle_result deepCopy() {
      return new getVehicle_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Vehicle getSuccess() {
      return this.success;
    }

    public getVehicle_result setSuccess(Vehicle success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Vehicle)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVehicle_result)
        return this.equals((getVehicle_result)that);
      return false;
    }

    public boolean equals(getVehicle_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVehicle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVehicle_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVehicle_resultStandardSchemeFactory implements SchemeFactory {
      public getVehicle_resultStandardScheme getScheme() {
        return new getVehicle_resultStandardScheme();
      }
    }

    private static class getVehicle_resultStandardScheme extends StandardScheme<getVehicle_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVehicle_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Vehicle();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVehicle_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVehicle_resultTupleSchemeFactory implements SchemeFactory {
      public getVehicle_resultTupleScheme getScheme() {
        return new getVehicle_resultTupleScheme();
      }
    }

    private static class getVehicle_resultTupleScheme extends TupleScheme<getVehicle_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVehicle_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVehicle_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Vehicle();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryStateVector_args implements org.apache.thrift.TBase<queryStateVector_args, queryStateVector_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryStateVector_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryStateVector_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VEHICLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicleId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryStateVector_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryStateVector_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int vehicleId; // required
    public int startTime; // required
    public int endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      VEHICLE_ID((short)2, "vehicleId"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // VEHICLE_ID
            return VEHICLE_ID;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __VEHICLEID_ISSET_ID = 1;
    private static final int __STARTTIME_ISSET_ID = 2;
    private static final int __ENDTIME_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VEHICLE_ID, new org.apache.thrift.meta_data.FieldMetaData("vehicleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryStateVector_args.class, metaDataMap);
    }

    public queryStateVector_args() {
    }

    public queryStateVector_args(
      int requestId,
      int vehicleId,
      int startTime,
      int endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.vehicleId = vehicleId;
      setVehicleIdIsSet(true);
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryStateVector_args(queryStateVector_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.vehicleId = other.vehicleId;
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public queryStateVector_args deepCopy() {
      return new queryStateVector_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setVehicleIdIsSet(false);
      this.vehicleId = 0;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryStateVector_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getVehicleId() {
      return this.vehicleId;
    }

    public queryStateVector_args setVehicleId(int vehicleId) {
      this.vehicleId = vehicleId;
      setVehicleIdIsSet(true);
      return this;
    }

    public void unsetVehicleId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VEHICLEID_ISSET_ID);
    }

    /** Returns true if field vehicleId is set (has been assigned a value) and false otherwise */
    public boolean isSetVehicleId() {
      return EncodingUtils.testBit(__isset_bitfield, __VEHICLEID_ISSET_ID);
    }

    public void setVehicleIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VEHICLEID_ISSET_ID, value);
    }

    public int getStartTime() {
      return this.startTime;
    }

    public queryStateVector_args setStartTime(int startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public int getEndTime() {
      return this.endTime;
    }

    public queryStateVector_args setEndTime(int endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case VEHICLE_ID:
        if (value == null) {
          unsetVehicleId();
        } else {
          setVehicleId((Integer)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Integer)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case VEHICLE_ID:
        return Integer.valueOf(getVehicleId());

      case START_TIME:
        return Integer.valueOf(getStartTime());

      case END_TIME:
        return Integer.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case VEHICLE_ID:
        return isSetVehicleId();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryStateVector_args)
        return this.equals((queryStateVector_args)that);
      return false;
    }

    public boolean equals(queryStateVector_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_vehicleId = true;
      boolean that_present_vehicleId = true;
      if (this_present_vehicleId || that_present_vehicleId) {
        if (!(this_present_vehicleId && that_present_vehicleId))
          return false;
        if (this.vehicleId != that.vehicleId)
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_vehicleId = true;
      list.add(present_vehicleId);
      if (present_vehicleId)
        list.add(vehicleId);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryStateVector_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVehicleId()).compareTo(other.isSetVehicleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVehicleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicleId, other.vehicleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryStateVector_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vehicleId:");
      sb.append(this.vehicleId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryStateVector_argsStandardSchemeFactory implements SchemeFactory {
      public queryStateVector_argsStandardScheme getScheme() {
        return new queryStateVector_argsStandardScheme();
      }
    }

    private static class queryStateVector_argsStandardScheme extends StandardScheme<queryStateVector_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryStateVector_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VEHICLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vehicleId = iprot.readI32();
                struct.setVehicleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.startTime = iprot.readI32();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.endTime = iprot.readI32();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryStateVector_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VEHICLE_ID_FIELD_DESC);
        oprot.writeI32(struct.vehicleId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI32(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI32(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryStateVector_argsTupleSchemeFactory implements SchemeFactory {
      public queryStateVector_argsTupleScheme getScheme() {
        return new queryStateVector_argsTupleScheme();
      }
    }

    private static class queryStateVector_argsTupleScheme extends TupleScheme<queryStateVector_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryStateVector_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetVehicleId()) {
          optionals.set(1);
        }
        if (struct.isSetStartTime()) {
          optionals.set(2);
        }
        if (struct.isSetEndTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetVehicleId()) {
          oprot.writeI32(struct.vehicleId);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI32(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI32(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryStateVector_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vehicleId = iprot.readI32();
          struct.setVehicleIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startTime = iprot.readI32();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endTime = iprot.readI32();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class querySensorData_args implements org.apache.thrift.TBase<querySensorData_args, querySensorData_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorData_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_FIELD_DESC = new org.apache.thrift.protocol.TField("region", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField SENSOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorType", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorData_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public Region region; // required
    public int startTime; // required
    public int endTime; // required
    /**
     * 
     * @see SensorType
     */
    public SensorType sensorType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      REGION((short)2, "region"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime"),
      /**
       * 
       * @see SensorType
       */
      SENSOR_TYPE((short)5, "sensorType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // REGION
            return REGION;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          case 5: // SENSOR_TYPE
            return SENSOR_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __STARTTIME_ISSET_ID = 1;
    private static final int __ENDTIME_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGION, new org.apache.thrift.meta_data.FieldMetaData("region", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Region.class)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SENSOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sensorType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SensorType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorData_args.class, metaDataMap);
    }

    public querySensorData_args() {
    }

    public querySensorData_args(
      int requestId,
      Region region,
      int startTime,
      int endTime,
      SensorType sensorType)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.region = region;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
      this.sensorType = sensorType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorData_args(querySensorData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetRegion()) {
        this.region = new Region(other.region);
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
      if (other.isSetSensorType()) {
        this.sensorType = other.sensorType;
      }
    }

    public querySensorData_args deepCopy() {
      return new querySensorData_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.region = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
      this.sensorType = null;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorData_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public Region getRegion() {
      return this.region;
    }

    public querySensorData_args setRegion(Region region) {
      this.region = region;
      return this;
    }

    public void unsetRegion() {
      this.region = null;
    }

    /** Returns true if field region is set (has been assigned a value) and false otherwise */
    public boolean isSetRegion() {
      return this.region != null;
    }

    public void setRegionIsSet(boolean value) {
      if (!value) {
        this.region = null;
      }
    }

    public int getStartTime() {
      return this.startTime;
    }

    public querySensorData_args setStartTime(int startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public int getEndTime() {
      return this.endTime;
    }

    public querySensorData_args setEndTime(int endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    /**
     * 
     * @see SensorType
     */
    public SensorType getSensorType() {
      return this.sensorType;
    }

    /**
     * 
     * @see SensorType
     */
    public querySensorData_args setSensorType(SensorType sensorType) {
      this.sensorType = sensorType;
      return this;
    }

    public void unsetSensorType() {
      this.sensorType = null;
    }

    /** Returns true if field sensorType is set (has been assigned a value) and false otherwise */
    public boolean isSetSensorType() {
      return this.sensorType != null;
    }

    public void setSensorTypeIsSet(boolean value) {
      if (!value) {
        this.sensorType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case REGION:
        if (value == null) {
          unsetRegion();
        } else {
          setRegion((Region)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Integer)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Integer)value);
        }
        break;

      case SENSOR_TYPE:
        if (value == null) {
          unsetSensorType();
        } else {
          setSensorType((SensorType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case REGION:
        return getRegion();

      case START_TIME:
        return Integer.valueOf(getStartTime());

      case END_TIME:
        return Integer.valueOf(getEndTime());

      case SENSOR_TYPE:
        return getSensorType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case REGION:
        return isSetRegion();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      case SENSOR_TYPE:
        return isSetSensorType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorData_args)
        return this.equals((querySensorData_args)that);
      return false;
    }

    public boolean equals(querySensorData_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_region = true && this.isSetRegion();
      boolean that_present_region = true && that.isSetRegion();
      if (this_present_region || that_present_region) {
        if (!(this_present_region && that_present_region))
          return false;
        if (!this.region.equals(that.region))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      boolean this_present_sensorType = true && this.isSetSensorType();
      boolean that_present_sensorType = true && that.isSetSensorType();
      if (this_present_sensorType || that_present_sensorType) {
        if (!(this_present_sensorType && that_present_sensorType))
          return false;
        if (!this.sensorType.equals(that.sensorType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_region = true && (isSetRegion());
      list.add(present_region);
      if (present_region)
        list.add(region);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      boolean present_sensorType = true && (isSetSensorType());
      list.add(present_sensorType);
      if (present_sensorType)
        list.add(sensorType.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegion()).compareTo(other.isSetRegion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region, other.region);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSensorType()).compareTo(other.isSetSensorType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSensorType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorType, other.sensorType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorData_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("region:");
      if (this.region == null) {
        sb.append("null");
      } else {
        sb.append(this.region);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sensorType:");
      if (this.sensorType == null) {
        sb.append("null");
      } else {
        sb.append(this.sensorType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (region != null) {
        region.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorData_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorData_argsStandardScheme getScheme() {
        return new querySensorData_argsStandardScheme();
      }
    }

    private static class querySensorData_argsStandardScheme extends StandardScheme<querySensorData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorData_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.region = new Region();
                struct.region.read(iprot);
                struct.setRegionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.startTime = iprot.readI32();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.endTime = iprot.readI32();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SENSOR_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sensorType = com.afarcloud.thrift.SensorType.findByValue(iprot.readI32());
                struct.setSensorTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorData_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.region != null) {
          oprot.writeFieldBegin(REGION_FIELD_DESC);
          struct.region.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI32(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI32(struct.endTime);
        oprot.writeFieldEnd();
        if (struct.sensorType != null) {
          oprot.writeFieldBegin(SENSOR_TYPE_FIELD_DESC);
          oprot.writeI32(struct.sensorType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorData_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorData_argsTupleScheme getScheme() {
        return new querySensorData_argsTupleScheme();
      }
    }

    private static class querySensorData_argsTupleScheme extends TupleScheme<querySensorData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorData_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetRegion()) {
          optionals.set(1);
        }
        if (struct.isSetStartTime()) {
          optionals.set(2);
        }
        if (struct.isSetEndTime()) {
          optionals.set(3);
        }
        if (struct.isSetSensorType()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetRegion()) {
          struct.region.write(oprot);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI32(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI32(struct.endTime);
        }
        if (struct.isSetSensorType()) {
          oprot.writeI32(struct.sensorType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorData_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.region = new Region();
          struct.region.read(iprot);
          struct.setRegionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startTime = iprot.readI32();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endTime = iprot.readI32();
          struct.setEndTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.sensorType = com.afarcloud.thrift.SensorType.findByValue(iprot.readI32());
          struct.setSensorTypeIsSet(true);
        }
      }
    }

  }

  public static class queryHistoricalStateVectors_args implements org.apache.thrift.TBase<queryHistoricalStateVectors_args, queryHistoricalStateVectors_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryHistoricalStateVectors_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryHistoricalStateVectors_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VEHICLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicleId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryHistoricalStateVectors_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryHistoricalStateVectors_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int vehicleId; // required
    public int startTime; // required
    public int endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      VEHICLE_ID((short)2, "vehicleId"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // VEHICLE_ID
            return VEHICLE_ID;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __VEHICLEID_ISSET_ID = 1;
    private static final int __STARTTIME_ISSET_ID = 2;
    private static final int __ENDTIME_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VEHICLE_ID, new org.apache.thrift.meta_data.FieldMetaData("vehicleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryHistoricalStateVectors_args.class, metaDataMap);
    }

    public queryHistoricalStateVectors_args() {
    }

    public queryHistoricalStateVectors_args(
      int requestId,
      int vehicleId,
      int startTime,
      int endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.vehicleId = vehicleId;
      setVehicleIdIsSet(true);
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryHistoricalStateVectors_args(queryHistoricalStateVectors_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.vehicleId = other.vehicleId;
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public queryHistoricalStateVectors_args deepCopy() {
      return new queryHistoricalStateVectors_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setVehicleIdIsSet(false);
      this.vehicleId = 0;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryHistoricalStateVectors_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getVehicleId() {
      return this.vehicleId;
    }

    public queryHistoricalStateVectors_args setVehicleId(int vehicleId) {
      this.vehicleId = vehicleId;
      setVehicleIdIsSet(true);
      return this;
    }

    public void unsetVehicleId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VEHICLEID_ISSET_ID);
    }

    /** Returns true if field vehicleId is set (has been assigned a value) and false otherwise */
    public boolean isSetVehicleId() {
      return EncodingUtils.testBit(__isset_bitfield, __VEHICLEID_ISSET_ID);
    }

    public void setVehicleIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VEHICLEID_ISSET_ID, value);
    }

    public int getStartTime() {
      return this.startTime;
    }

    public queryHistoricalStateVectors_args setStartTime(int startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public int getEndTime() {
      return this.endTime;
    }

    public queryHistoricalStateVectors_args setEndTime(int endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case VEHICLE_ID:
        if (value == null) {
          unsetVehicleId();
        } else {
          setVehicleId((Integer)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Integer)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case VEHICLE_ID:
        return Integer.valueOf(getVehicleId());

      case START_TIME:
        return Integer.valueOf(getStartTime());

      case END_TIME:
        return Integer.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case VEHICLE_ID:
        return isSetVehicleId();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryHistoricalStateVectors_args)
        return this.equals((queryHistoricalStateVectors_args)that);
      return false;
    }

    public boolean equals(queryHistoricalStateVectors_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_vehicleId = true;
      boolean that_present_vehicleId = true;
      if (this_present_vehicleId || that_present_vehicleId) {
        if (!(this_present_vehicleId && that_present_vehicleId))
          return false;
        if (this.vehicleId != that.vehicleId)
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_vehicleId = true;
      list.add(present_vehicleId);
      if (present_vehicleId)
        list.add(vehicleId);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryHistoricalStateVectors_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVehicleId()).compareTo(other.isSetVehicleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVehicleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicleId, other.vehicleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryHistoricalStateVectors_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vehicleId:");
      sb.append(this.vehicleId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryHistoricalStateVectors_argsStandardSchemeFactory implements SchemeFactory {
      public queryHistoricalStateVectors_argsStandardScheme getScheme() {
        return new queryHistoricalStateVectors_argsStandardScheme();
      }
    }

    private static class queryHistoricalStateVectors_argsStandardScheme extends StandardScheme<queryHistoricalStateVectors_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryHistoricalStateVectors_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VEHICLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vehicleId = iprot.readI32();
                struct.setVehicleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.startTime = iprot.readI32();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.endTime = iprot.readI32();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryHistoricalStateVectors_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VEHICLE_ID_FIELD_DESC);
        oprot.writeI32(struct.vehicleId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI32(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI32(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryHistoricalStateVectors_argsTupleSchemeFactory implements SchemeFactory {
      public queryHistoricalStateVectors_argsTupleScheme getScheme() {
        return new queryHistoricalStateVectors_argsTupleScheme();
      }
    }

    private static class queryHistoricalStateVectors_argsTupleScheme extends TupleScheme<queryHistoricalStateVectors_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryHistoricalStateVectors_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetVehicleId()) {
          optionals.set(1);
        }
        if (struct.isSetStartTime()) {
          optionals.set(2);
        }
        if (struct.isSetEndTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetVehicleId()) {
          oprot.writeI32(struct.vehicleId);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI32(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI32(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryHistoricalStateVectors_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vehicleId = iprot.readI32();
          struct.setVehicleIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startTime = iprot.readI32();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endTime = iprot.readI32();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class queryHistoricalSensorData_args implements org.apache.thrift.TBase<queryHistoricalSensorData_args, queryHistoricalSensorData_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryHistoricalSensorData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryHistoricalSensorData_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_FIELD_DESC = new org.apache.thrift.protocol.TField("region", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField SENSOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorType", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryHistoricalSensorData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryHistoricalSensorData_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public Region region; // required
    public int startTime; // required
    public int endTime; // required
    /**
     * 
     * @see SensorType
     */
    public SensorType sensorType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      REGION((short)2, "region"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime"),
      /**
       * 
       * @see SensorType
       */
      SENSOR_TYPE((short)5, "sensorType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // REGION
            return REGION;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          case 5: // SENSOR_TYPE
            return SENSOR_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __STARTTIME_ISSET_ID = 1;
    private static final int __ENDTIME_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGION, new org.apache.thrift.meta_data.FieldMetaData("region", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Region.class)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SENSOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sensorType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SensorType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryHistoricalSensorData_args.class, metaDataMap);
    }

    public queryHistoricalSensorData_args() {
    }

    public queryHistoricalSensorData_args(
      int requestId,
      Region region,
      int startTime,
      int endTime,
      SensorType sensorType)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.region = region;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
      this.sensorType = sensorType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryHistoricalSensorData_args(queryHistoricalSensorData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetRegion()) {
        this.region = new Region(other.region);
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
      if (other.isSetSensorType()) {
        this.sensorType = other.sensorType;
      }
    }

    public queryHistoricalSensorData_args deepCopy() {
      return new queryHistoricalSensorData_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.region = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
      this.sensorType = null;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryHistoricalSensorData_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public Region getRegion() {
      return this.region;
    }

    public queryHistoricalSensorData_args setRegion(Region region) {
      this.region = region;
      return this;
    }

    public void unsetRegion() {
      this.region = null;
    }

    /** Returns true if field region is set (has been assigned a value) and false otherwise */
    public boolean isSetRegion() {
      return this.region != null;
    }

    public void setRegionIsSet(boolean value) {
      if (!value) {
        this.region = null;
      }
    }

    public int getStartTime() {
      return this.startTime;
    }

    public queryHistoricalSensorData_args setStartTime(int startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public int getEndTime() {
      return this.endTime;
    }

    public queryHistoricalSensorData_args setEndTime(int endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    /**
     * 
     * @see SensorType
     */
    public SensorType getSensorType() {
      return this.sensorType;
    }

    /**
     * 
     * @see SensorType
     */
    public queryHistoricalSensorData_args setSensorType(SensorType sensorType) {
      this.sensorType = sensorType;
      return this;
    }

    public void unsetSensorType() {
      this.sensorType = null;
    }

    /** Returns true if field sensorType is set (has been assigned a value) and false otherwise */
    public boolean isSetSensorType() {
      return this.sensorType != null;
    }

    public void setSensorTypeIsSet(boolean value) {
      if (!value) {
        this.sensorType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case REGION:
        if (value == null) {
          unsetRegion();
        } else {
          setRegion((Region)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Integer)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Integer)value);
        }
        break;

      case SENSOR_TYPE:
        if (value == null) {
          unsetSensorType();
        } else {
          setSensorType((SensorType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case REGION:
        return getRegion();

      case START_TIME:
        return Integer.valueOf(getStartTime());

      case END_TIME:
        return Integer.valueOf(getEndTime());

      case SENSOR_TYPE:
        return getSensorType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case REGION:
        return isSetRegion();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      case SENSOR_TYPE:
        return isSetSensorType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryHistoricalSensorData_args)
        return this.equals((queryHistoricalSensorData_args)that);
      return false;
    }

    public boolean equals(queryHistoricalSensorData_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_region = true && this.isSetRegion();
      boolean that_present_region = true && that.isSetRegion();
      if (this_present_region || that_present_region) {
        if (!(this_present_region && that_present_region))
          return false;
        if (!this.region.equals(that.region))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      boolean this_present_sensorType = true && this.isSetSensorType();
      boolean that_present_sensorType = true && that.isSetSensorType();
      if (this_present_sensorType || that_present_sensorType) {
        if (!(this_present_sensorType && that_present_sensorType))
          return false;
        if (!this.sensorType.equals(that.sensorType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_region = true && (isSetRegion());
      list.add(present_region);
      if (present_region)
        list.add(region);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      boolean present_sensorType = true && (isSetSensorType());
      list.add(present_sensorType);
      if (present_sensorType)
        list.add(sensorType.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(queryHistoricalSensorData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegion()).compareTo(other.isSetRegion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region, other.region);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSensorType()).compareTo(other.isSetSensorType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSensorType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorType, other.sensorType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryHistoricalSensorData_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("region:");
      if (this.region == null) {
        sb.append("null");
      } else {
        sb.append(this.region);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sensorType:");
      if (this.sensorType == null) {
        sb.append("null");
      } else {
        sb.append(this.sensorType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (region != null) {
        region.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryHistoricalSensorData_argsStandardSchemeFactory implements SchemeFactory {
      public queryHistoricalSensorData_argsStandardScheme getScheme() {
        return new queryHistoricalSensorData_argsStandardScheme();
      }
    }

    private static class queryHistoricalSensorData_argsStandardScheme extends StandardScheme<queryHistoricalSensorData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryHistoricalSensorData_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.region = new Region();
                struct.region.read(iprot);
                struct.setRegionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.startTime = iprot.readI32();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.endTime = iprot.readI32();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SENSOR_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sensorType = com.afarcloud.thrift.SensorType.findByValue(iprot.readI32());
                struct.setSensorTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryHistoricalSensorData_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.region != null) {
          oprot.writeFieldBegin(REGION_FIELD_DESC);
          struct.region.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI32(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI32(struct.endTime);
        oprot.writeFieldEnd();
        if (struct.sensorType != null) {
          oprot.writeFieldBegin(SENSOR_TYPE_FIELD_DESC);
          oprot.writeI32(struct.sensorType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryHistoricalSensorData_argsTupleSchemeFactory implements SchemeFactory {
      public queryHistoricalSensorData_argsTupleScheme getScheme() {
        return new queryHistoricalSensorData_argsTupleScheme();
      }
    }

    private static class queryHistoricalSensorData_argsTupleScheme extends TupleScheme<queryHistoricalSensorData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryHistoricalSensorData_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetRegion()) {
          optionals.set(1);
        }
        if (struct.isSetStartTime()) {
          optionals.set(2);
        }
        if (struct.isSetEndTime()) {
          optionals.set(3);
        }
        if (struct.isSetSensorType()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetRegion()) {
          struct.region.write(oprot);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI32(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI32(struct.endTime);
        }
        if (struct.isSetSensorType()) {
          oprot.writeI32(struct.sensorType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryHistoricalSensorData_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.region = new Region();
          struct.region.read(iprot);
          struct.setRegionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startTime = iprot.readI32();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endTime = iprot.readI32();
          struct.setEndTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.sensorType = com.afarcloud.thrift.SensorType.findByValue(iprot.readI32());
          struct.setSensorTypeIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastData_args implements org.apache.thrift.TBase<querySensorLastData_args, querySensorLastData_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastData_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_FIELD_DESC = new org.apache.thrift.protocol.TField("region", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField SENSOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorType", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastData_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public Region region; // required
    public int startTime; // required
    public int endTime; // required
    /**
     * 
     * @see SensorType
     */
    public SensorType sensorType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      REGION((short)2, "region"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime"),
      /**
       * 
       * @see SensorType
       */
      SENSOR_TYPE((short)5, "sensorType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // REGION
            return REGION;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          case 5: // SENSOR_TYPE
            return SENSOR_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __STARTTIME_ISSET_ID = 1;
    private static final int __ENDTIME_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGION, new org.apache.thrift.meta_data.FieldMetaData("region", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Region.class)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SENSOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sensorType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SensorType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastData_args.class, metaDataMap);
    }

    public querySensorLastData_args() {
    }

    public querySensorLastData_args(
      int requestId,
      Region region,
      int startTime,
      int endTime,
      SensorType sensorType)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.region = region;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
      this.sensorType = sensorType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastData_args(querySensorLastData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetRegion()) {
        this.region = new Region(other.region);
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
      if (other.isSetSensorType()) {
        this.sensorType = other.sensorType;
      }
    }

    public querySensorLastData_args deepCopy() {
      return new querySensorLastData_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.region = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
      this.sensorType = null;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorLastData_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public Region getRegion() {
      return this.region;
    }

    public querySensorLastData_args setRegion(Region region) {
      this.region = region;
      return this;
    }

    public void unsetRegion() {
      this.region = null;
    }

    /** Returns true if field region is set (has been assigned a value) and false otherwise */
    public boolean isSetRegion() {
      return this.region != null;
    }

    public void setRegionIsSet(boolean value) {
      if (!value) {
        this.region = null;
      }
    }

    public int getStartTime() {
      return this.startTime;
    }

    public querySensorLastData_args setStartTime(int startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public int getEndTime() {
      return this.endTime;
    }

    public querySensorLastData_args setEndTime(int endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    /**
     * 
     * @see SensorType
     */
    public SensorType getSensorType() {
      return this.sensorType;
    }

    /**
     * 
     * @see SensorType
     */
    public querySensorLastData_args setSensorType(SensorType sensorType) {
      this.sensorType = sensorType;
      return this;
    }

    public void unsetSensorType() {
      this.sensorType = null;
    }

    /** Returns true if field sensorType is set (has been assigned a value) and false otherwise */
    public boolean isSetSensorType() {
      return this.sensorType != null;
    }

    public void setSensorTypeIsSet(boolean value) {
      if (!value) {
        this.sensorType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case REGION:
        if (value == null) {
          unsetRegion();
        } else {
          setRegion((Region)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Integer)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Integer)value);
        }
        break;

      case SENSOR_TYPE:
        if (value == null) {
          unsetSensorType();
        } else {
          setSensorType((SensorType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case REGION:
        return getRegion();

      case START_TIME:
        return Integer.valueOf(getStartTime());

      case END_TIME:
        return Integer.valueOf(getEndTime());

      case SENSOR_TYPE:
        return getSensorType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case REGION:
        return isSetRegion();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      case SENSOR_TYPE:
        return isSetSensorType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastData_args)
        return this.equals((querySensorLastData_args)that);
      return false;
    }

    public boolean equals(querySensorLastData_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_region = true && this.isSetRegion();
      boolean that_present_region = true && that.isSetRegion();
      if (this_present_region || that_present_region) {
        if (!(this_present_region && that_present_region))
          return false;
        if (!this.region.equals(that.region))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      boolean this_present_sensorType = true && this.isSetSensorType();
      boolean that_present_sensorType = true && that.isSetSensorType();
      if (this_present_sensorType || that_present_sensorType) {
        if (!(this_present_sensorType && that_present_sensorType))
          return false;
        if (!this.sensorType.equals(that.sensorType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_region = true && (isSetRegion());
      list.add(present_region);
      if (present_region)
        list.add(region);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      boolean present_sensorType = true && (isSetSensorType());
      list.add(present_sensorType);
      if (present_sensorType)
        list.add(sensorType.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegion()).compareTo(other.isSetRegion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region, other.region);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSensorType()).compareTo(other.isSetSensorType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSensorType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorType, other.sensorType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastData_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("region:");
      if (this.region == null) {
        sb.append("null");
      } else {
        sb.append(this.region);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sensorType:");
      if (this.sensorType == null) {
        sb.append("null");
      } else {
        sb.append(this.sensorType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (region != null) {
        region.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastData_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorLastData_argsStandardScheme getScheme() {
        return new querySensorLastData_argsStandardScheme();
      }
    }

    private static class querySensorLastData_argsStandardScheme extends StandardScheme<querySensorLastData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastData_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.region = new Region();
                struct.region.read(iprot);
                struct.setRegionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.startTime = iprot.readI32();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.endTime = iprot.readI32();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SENSOR_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sensorType = com.afarcloud.thrift.SensorType.findByValue(iprot.readI32());
                struct.setSensorTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastData_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.region != null) {
          oprot.writeFieldBegin(REGION_FIELD_DESC);
          struct.region.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI32(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI32(struct.endTime);
        oprot.writeFieldEnd();
        if (struct.sensorType != null) {
          oprot.writeFieldBegin(SENSOR_TYPE_FIELD_DESC);
          oprot.writeI32(struct.sensorType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastData_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorLastData_argsTupleScheme getScheme() {
        return new querySensorLastData_argsTupleScheme();
      }
    }

    private static class querySensorLastData_argsTupleScheme extends TupleScheme<querySensorLastData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastData_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetRegion()) {
          optionals.set(1);
        }
        if (struct.isSetStartTime()) {
          optionals.set(2);
        }
        if (struct.isSetEndTime()) {
          optionals.set(3);
        }
        if (struct.isSetSensorType()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetRegion()) {
          struct.region.write(oprot);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI32(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI32(struct.endTime);
        }
        if (struct.isSetSensorType()) {
          oprot.writeI32(struct.sensorType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastData_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.region = new Region();
          struct.region.read(iprot);
          struct.setRegionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startTime = iprot.readI32();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endTime = iprot.readI32();
          struct.setEndTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.sensorType = com.afarcloud.thrift.SensorType.findByValue(iprot.readI32());
          struct.setSensorTypeIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastData_result implements org.apache.thrift.TBase<querySensorLastData_result, querySensorLastData_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastData_resultTupleSchemeFactory());
    }

    public List<SensorData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastData_result.class, metaDataMap);
    }

    public querySensorLastData_result() {
    }

    public querySensorLastData_result(
      List<SensorData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastData_result(querySensorLastData_result other) {
      if (other.isSetSuccess()) {
        List<SensorData> __this__success = new ArrayList<SensorData>(other.success.size());
        for (SensorData other_element : other.success) {
          __this__success.add(new SensorData(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySensorLastData_result deepCopy() {
      return new querySensorLastData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SensorData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SensorData elem) {
      if (this.success == null) {
        this.success = new ArrayList<SensorData>();
      }
      this.success.add(elem);
    }

    public List<SensorData> getSuccess() {
      return this.success;
    }

    public querySensorLastData_result setSuccess(List<SensorData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastData_result)
        return this.equals((querySensorLastData_result)that);
      return false;
    }

    public boolean equals(querySensorLastData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastData_resultStandardSchemeFactory implements SchemeFactory {
      public querySensorLastData_resultStandardScheme getScheme() {
        return new querySensorLastData_resultStandardScheme();
      }
    }

    private static class querySensorLastData_resultStandardScheme extends StandardScheme<querySensorLastData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastData_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.success = new ArrayList<SensorData>(_list104.size);
                  SensorData _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = new SensorData();
                    _elem105.read(iprot);
                    struct.success.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastData_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SensorData _iter107 : struct.success)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastData_resultTupleSchemeFactory implements SchemeFactory {
      public querySensorLastData_resultTupleScheme getScheme() {
        return new querySensorLastData_resultTupleScheme();
      }
    }

    private static class querySensorLastData_resultTupleScheme extends TupleScheme<querySensorLastData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastData_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SensorData _iter108 : struct.success)
            {
              _iter108.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastData_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SensorData>(_list109.size);
            SensorData _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = new SensorData();
              _elem110.read(iprot);
              struct.success.add(_elem110);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class storeEvent_args implements org.apache.thrift.TBase<storeEvent_args, storeEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<storeEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeEvent_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField VEHICLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicleId", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField SUBTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("subtype", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField TIME_REFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeReference", org.apache.thrift.protocol.TType.I64, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeEvent_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int missionId; // required
    public int vehicleId; // required
    public int subtype; // required
    public String description; // required
    public long timeReference; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      MISSION_ID((short)2, "missionId"),
      VEHICLE_ID((short)3, "vehicleId"),
      SUBTYPE((short)4, "subtype"),
      DESCRIPTION((short)5, "description"),
      TIME_REFERENCE((short)6, "timeReference");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // MISSION_ID
            return MISSION_ID;
          case 3: // VEHICLE_ID
            return VEHICLE_ID;
          case 4: // SUBTYPE
            return SUBTYPE;
          case 5: // DESCRIPTION
            return DESCRIPTION;
          case 6: // TIME_REFERENCE
            return TIME_REFERENCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __MISSIONID_ISSET_ID = 1;
    private static final int __VEHICLEID_ISSET_ID = 2;
    private static final int __SUBTYPE_ISSET_ID = 3;
    private static final int __TIMEREFERENCE_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VEHICLE_ID, new org.apache.thrift.meta_data.FieldMetaData("vehicleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SUBTYPE, new org.apache.thrift.meta_data.FieldMetaData("subtype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME_REFERENCE, new org.apache.thrift.meta_data.FieldMetaData("timeReference", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeEvent_args.class, metaDataMap);
    }

    public storeEvent_args() {
    }

    public storeEvent_args(
      int requestId,
      int missionId,
      int vehicleId,
      int subtype,
      String description,
      long timeReference)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.missionId = missionId;
      setMissionIdIsSet(true);
      this.vehicleId = vehicleId;
      setVehicleIdIsSet(true);
      this.subtype = subtype;
      setSubtypeIsSet(true);
      this.description = description;
      this.timeReference = timeReference;
      setTimeReferenceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeEvent_args(storeEvent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.missionId = other.missionId;
      this.vehicleId = other.vehicleId;
      this.subtype = other.subtype;
      if (other.isSetDescription()) {
        this.description = other.description;
      }
      this.timeReference = other.timeReference;
    }

    public storeEvent_args deepCopy() {
      return new storeEvent_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setMissionIdIsSet(false);
      this.missionId = 0;
      setVehicleIdIsSet(false);
      this.vehicleId = 0;
      setSubtypeIsSet(false);
      this.subtype = 0;
      this.description = null;
      setTimeReferenceIsSet(false);
      this.timeReference = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public storeEvent_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getMissionId() {
      return this.missionId;
    }

    public storeEvent_args setMissionId(int missionId) {
      this.missionId = missionId;
      setMissionIdIsSet(true);
      return this;
    }

    public void unsetMissionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MISSIONID_ISSET_ID);
    }

    /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
    public boolean isSetMissionId() {
      return EncodingUtils.testBit(__isset_bitfield, __MISSIONID_ISSET_ID);
    }

    public void setMissionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MISSIONID_ISSET_ID, value);
    }

    public int getVehicleId() {
      return this.vehicleId;
    }

    public storeEvent_args setVehicleId(int vehicleId) {
      this.vehicleId = vehicleId;
      setVehicleIdIsSet(true);
      return this;
    }

    public void unsetVehicleId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VEHICLEID_ISSET_ID);
    }

    /** Returns true if field vehicleId is set (has been assigned a value) and false otherwise */
    public boolean isSetVehicleId() {
      return EncodingUtils.testBit(__isset_bitfield, __VEHICLEID_ISSET_ID);
    }

    public void setVehicleIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VEHICLEID_ISSET_ID, value);
    }

    public int getSubtype() {
      return this.subtype;
    }

    public storeEvent_args setSubtype(int subtype) {
      this.subtype = subtype;
      setSubtypeIsSet(true);
      return this;
    }

    public void unsetSubtype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBTYPE_ISSET_ID);
    }

    /** Returns true if field subtype is set (has been assigned a value) and false otherwise */
    public boolean isSetSubtype() {
      return EncodingUtils.testBit(__isset_bitfield, __SUBTYPE_ISSET_ID);
    }

    public void setSubtypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBTYPE_ISSET_ID, value);
    }

    public String getDescription() {
      return this.description;
    }

    public storeEvent_args setDescription(String description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public long getTimeReference() {
      return this.timeReference;
    }

    public storeEvent_args setTimeReference(long timeReference) {
      this.timeReference = timeReference;
      setTimeReferenceIsSet(true);
      return this;
    }

    public void unsetTimeReference() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEREFERENCE_ISSET_ID);
    }

    /** Returns true if field timeReference is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeReference() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMEREFERENCE_ISSET_ID);
    }

    public void setTimeReferenceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEREFERENCE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case MISSION_ID:
        if (value == null) {
          unsetMissionId();
        } else {
          setMissionId((Integer)value);
        }
        break;

      case VEHICLE_ID:
        if (value == null) {
          unsetVehicleId();
        } else {
          setVehicleId((Integer)value);
        }
        break;

      case SUBTYPE:
        if (value == null) {
          unsetSubtype();
        } else {
          setSubtype((Integer)value);
        }
        break;

      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((String)value);
        }
        break;

      case TIME_REFERENCE:
        if (value == null) {
          unsetTimeReference();
        } else {
          setTimeReference((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case MISSION_ID:
        return Integer.valueOf(getMissionId());

      case VEHICLE_ID:
        return Integer.valueOf(getVehicleId());

      case SUBTYPE:
        return Integer.valueOf(getSubtype());

      case DESCRIPTION:
        return getDescription();

      case TIME_REFERENCE:
        return Long.valueOf(getTimeReference());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case MISSION_ID:
        return isSetMissionId();
      case VEHICLE_ID:
        return isSetVehicleId();
      case SUBTYPE:
        return isSetSubtype();
      case DESCRIPTION:
        return isSetDescription();
      case TIME_REFERENCE:
        return isSetTimeReference();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeEvent_args)
        return this.equals((storeEvent_args)that);
      return false;
    }

    public boolean equals(storeEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_missionId = true;
      boolean that_present_missionId = true;
      if (this_present_missionId || that_present_missionId) {
        if (!(this_present_missionId && that_present_missionId))
          return false;
        if (this.missionId != that.missionId)
          return false;
      }

      boolean this_present_vehicleId = true;
      boolean that_present_vehicleId = true;
      if (this_present_vehicleId || that_present_vehicleId) {
        if (!(this_present_vehicleId && that_present_vehicleId))
          return false;
        if (this.vehicleId != that.vehicleId)
          return false;
      }

      boolean this_present_subtype = true;
      boolean that_present_subtype = true;
      if (this_present_subtype || that_present_subtype) {
        if (!(this_present_subtype && that_present_subtype))
          return false;
        if (this.subtype != that.subtype)
          return false;
      }

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      boolean this_present_timeReference = true;
      boolean that_present_timeReference = true;
      if (this_present_timeReference || that_present_timeReference) {
        if (!(this_present_timeReference && that_present_timeReference))
          return false;
        if (this.timeReference != that.timeReference)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_missionId = true;
      list.add(present_missionId);
      if (present_missionId)
        list.add(missionId);

      boolean present_vehicleId = true;
      list.add(present_vehicleId);
      if (present_vehicleId)
        list.add(vehicleId);

      boolean present_subtype = true;
      list.add(present_subtype);
      if (present_subtype)
        list.add(subtype);

      boolean present_description = true && (isSetDescription());
      list.add(present_description);
      if (present_description)
        list.add(description);

      boolean present_timeReference = true;
      list.add(present_timeReference);
      if (present_timeReference)
        list.add(timeReference);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMissionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVehicleId()).compareTo(other.isSetVehicleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVehicleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicleId, other.vehicleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubtype()).compareTo(other.isSetSubtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subtype, other.subtype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeReference()).compareTo(other.isSetTimeReference());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeReference()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeReference, other.timeReference);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeEvent_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("missionId:");
      sb.append(this.missionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vehicleId:");
      sb.append(this.vehicleId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("subtype:");
      sb.append(this.subtype);
      first = false;
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeReference:");
      sb.append(this.timeReference);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeEvent_argsStandardSchemeFactory implements SchemeFactory {
      public storeEvent_argsStandardScheme getScheme() {
        return new storeEvent_argsStandardScheme();
      }
    }

    private static class storeEvent_argsStandardScheme extends StandardScheme<storeEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeEvent_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MISSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.missionId = iprot.readI32();
                struct.setMissionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VEHICLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vehicleId = iprot.readI32();
                struct.setVehicleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SUBTYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.subtype = iprot.readI32();
                struct.setSubtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TIME_REFERENCE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.timeReference = iprot.readI64();
                struct.setTimeReferenceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeEvent_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
        oprot.writeI32(struct.missionId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VEHICLE_ID_FIELD_DESC);
        oprot.writeI32(struct.vehicleId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SUBTYPE_FIELD_DESC);
        oprot.writeI32(struct.subtype);
        oprot.writeFieldEnd();
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_REFERENCE_FIELD_DESC);
        oprot.writeI64(struct.timeReference);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeEvent_argsTupleSchemeFactory implements SchemeFactory {
      public storeEvent_argsTupleScheme getScheme() {
        return new storeEvent_argsTupleScheme();
      }
    }

    private static class storeEvent_argsTupleScheme extends TupleScheme<storeEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeEvent_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetMissionId()) {
          optionals.set(1);
        }
        if (struct.isSetVehicleId()) {
          optionals.set(2);
        }
        if (struct.isSetSubtype()) {
          optionals.set(3);
        }
        if (struct.isSetDescription()) {
          optionals.set(4);
        }
        if (struct.isSetTimeReference()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetMissionId()) {
          oprot.writeI32(struct.missionId);
        }
        if (struct.isSetVehicleId()) {
          oprot.writeI32(struct.vehicleId);
        }
        if (struct.isSetSubtype()) {
          oprot.writeI32(struct.subtype);
        }
        if (struct.isSetDescription()) {
          oprot.writeString(struct.description);
        }
        if (struct.isSetTimeReference()) {
          oprot.writeI64(struct.timeReference);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeEvent_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.missionId = iprot.readI32();
          struct.setMissionIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.vehicleId = iprot.readI32();
          struct.setVehicleIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.subtype = iprot.readI32();
          struct.setSubtypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.description = iprot.readString();
          struct.setDescriptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.timeReference = iprot.readI64();
          struct.setTimeReferenceIsSet(true);
        }
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public ping_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
