/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.afarcloud.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-9-30")
public class SensorData implements org.apache.thrift.TBase<SensorData, SensorData._Fields>, java.io.Serializable, Cloneable, Comparable<SensorData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SensorData");

  private static final org.apache.thrift.protocol.TField SENSOR_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorUid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SENSOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("unit", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField SENSOR_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorPosition", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SensorDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SensorDataTupleSchemeFactory());
  }

  public String sensorUid; // required
  /**
   * 
   * @see SensorType
   */
  public SensorType sensorType; // required
  public String unit; // required
  public double value; // required
  public Position sensorPosition; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SENSOR_UID((short)1, "sensorUid"),
    /**
     * 
     * @see SensorType
     */
    SENSOR_TYPE((short)2, "sensorType"),
    UNIT((short)3, "unit"),
    VALUE((short)4, "value"),
    SENSOR_POSITION((short)5, "sensorPosition");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SENSOR_UID
          return SENSOR_UID;
        case 2: // SENSOR_TYPE
          return SENSOR_TYPE;
        case 3: // UNIT
          return UNIT;
        case 4: // VALUE
          return VALUE;
        case 5: // SENSOR_POSITION
          return SENSOR_POSITION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VALUE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SENSOR_UID, new org.apache.thrift.meta_data.FieldMetaData("sensorUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENSOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sensorType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SensorType.class)));
    tmpMap.put(_Fields.UNIT, new org.apache.thrift.meta_data.FieldMetaData("unit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SENSOR_POSITION, new org.apache.thrift.meta_data.FieldMetaData("sensorPosition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Position.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SensorData.class, metaDataMap);
  }

  public SensorData() {
  }

  public SensorData(
    String sensorUid,
    SensorType sensorType,
    String unit,
    double value,
    Position sensorPosition)
  {
    this();
    this.sensorUid = sensorUid;
    this.sensorType = sensorType;
    this.unit = unit;
    this.value = value;
    setValueIsSet(true);
    this.sensorPosition = sensorPosition;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SensorData(SensorData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSensorUid()) {
      this.sensorUid = other.sensorUid;
    }
    if (other.isSetSensorType()) {
      this.sensorType = other.sensorType;
    }
    if (other.isSetUnit()) {
      this.unit = other.unit;
    }
    this.value = other.value;
    if (other.isSetSensorPosition()) {
      this.sensorPosition = new Position(other.sensorPosition);
    }
  }

  public SensorData deepCopy() {
    return new SensorData(this);
  }

  @Override
  public void clear() {
    this.sensorUid = null;
    this.sensorType = null;
    this.unit = null;
    setValueIsSet(false);
    this.value = 0.0;
    this.sensorPosition = null;
  }

  public String getSensorUid() {
    return this.sensorUid;
  }

  public SensorData setSensorUid(String sensorUid) {
    this.sensorUid = sensorUid;
    return this;
  }

  public void unsetSensorUid() {
    this.sensorUid = null;
  }

  /** Returns true if field sensorUid is set (has been assigned a value) and false otherwise */
  public boolean isSetSensorUid() {
    return this.sensorUid != null;
  }

  public void setSensorUidIsSet(boolean value) {
    if (!value) {
      this.sensorUid = null;
    }
  }

  /**
   * 
   * @see SensorType
   */
  public SensorType getSensorType() {
    return this.sensorType;
  }

  /**
   * 
   * @see SensorType
   */
  public SensorData setSensorType(SensorType sensorType) {
    this.sensorType = sensorType;
    return this;
  }

  public void unsetSensorType() {
    this.sensorType = null;
  }

  /** Returns true if field sensorType is set (has been assigned a value) and false otherwise */
  public boolean isSetSensorType() {
    return this.sensorType != null;
  }

  public void setSensorTypeIsSet(boolean value) {
    if (!value) {
      this.sensorType = null;
    }
  }

  public String getUnit() {
    return this.unit;
  }

  public SensorData setUnit(String unit) {
    this.unit = unit;
    return this;
  }

  public void unsetUnit() {
    this.unit = null;
  }

  /** Returns true if field unit is set (has been assigned a value) and false otherwise */
  public boolean isSetUnit() {
    return this.unit != null;
  }

  public void setUnitIsSet(boolean value) {
    if (!value) {
      this.unit = null;
    }
  }

  public double getValue() {
    return this.value;
  }

  public SensorData setValue(double value) {
    this.value = value;
    setValueIsSet(true);
    return this;
  }

  public void unsetValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALUE_ISSET_ID);
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return EncodingUtils.testBit(__isset_bitfield, __VALUE_ISSET_ID);
  }

  public void setValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALUE_ISSET_ID, value);
  }

  public Position getSensorPosition() {
    return this.sensorPosition;
  }

  public SensorData setSensorPosition(Position sensorPosition) {
    this.sensorPosition = sensorPosition;
    return this;
  }

  public void unsetSensorPosition() {
    this.sensorPosition = null;
  }

  /** Returns true if field sensorPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetSensorPosition() {
    return this.sensorPosition != null;
  }

  public void setSensorPositionIsSet(boolean value) {
    if (!value) {
      this.sensorPosition = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SENSOR_UID:
      if (value == null) {
        unsetSensorUid();
      } else {
        setSensorUid((String)value);
      }
      break;

    case SENSOR_TYPE:
      if (value == null) {
        unsetSensorType();
      } else {
        setSensorType((SensorType)value);
      }
      break;

    case UNIT:
      if (value == null) {
        unsetUnit();
      } else {
        setUnit((String)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((Double)value);
      }
      break;

    case SENSOR_POSITION:
      if (value == null) {
        unsetSensorPosition();
      } else {
        setSensorPosition((Position)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SENSOR_UID:
      return getSensorUid();

    case SENSOR_TYPE:
      return getSensorType();

    case UNIT:
      return getUnit();

    case VALUE:
      return Double.valueOf(getValue());

    case SENSOR_POSITION:
      return getSensorPosition();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SENSOR_UID:
      return isSetSensorUid();
    case SENSOR_TYPE:
      return isSetSensorType();
    case UNIT:
      return isSetUnit();
    case VALUE:
      return isSetValue();
    case SENSOR_POSITION:
      return isSetSensorPosition();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SensorData)
      return this.equals((SensorData)that);
    return false;
  }

  public boolean equals(SensorData that) {
    if (that == null)
      return false;

    boolean this_present_sensorUid = true && this.isSetSensorUid();
    boolean that_present_sensorUid = true && that.isSetSensorUid();
    if (this_present_sensorUid || that_present_sensorUid) {
      if (!(this_present_sensorUid && that_present_sensorUid))
        return false;
      if (!this.sensorUid.equals(that.sensorUid))
        return false;
    }

    boolean this_present_sensorType = true && this.isSetSensorType();
    boolean that_present_sensorType = true && that.isSetSensorType();
    if (this_present_sensorType || that_present_sensorType) {
      if (!(this_present_sensorType && that_present_sensorType))
        return false;
      if (!this.sensorType.equals(that.sensorType))
        return false;
    }

    boolean this_present_unit = true && this.isSetUnit();
    boolean that_present_unit = true && that.isSetUnit();
    if (this_present_unit || that_present_unit) {
      if (!(this_present_unit && that_present_unit))
        return false;
      if (!this.unit.equals(that.unit))
        return false;
    }

    boolean this_present_value = true;
    boolean that_present_value = true;
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (this.value != that.value)
        return false;
    }

    boolean this_present_sensorPosition = true && this.isSetSensorPosition();
    boolean that_present_sensorPosition = true && that.isSetSensorPosition();
    if (this_present_sensorPosition || that_present_sensorPosition) {
      if (!(this_present_sensorPosition && that_present_sensorPosition))
        return false;
      if (!this.sensorPosition.equals(that.sensorPosition))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sensorUid = true && (isSetSensorUid());
    list.add(present_sensorUid);
    if (present_sensorUid)
      list.add(sensorUid);

    boolean present_sensorType = true && (isSetSensorType());
    list.add(present_sensorType);
    if (present_sensorType)
      list.add(sensorType.getValue());

    boolean present_unit = true && (isSetUnit());
    list.add(present_unit);
    if (present_unit)
      list.add(unit);

    boolean present_value = true;
    list.add(present_value);
    if (present_value)
      list.add(value);

    boolean present_sensorPosition = true && (isSetSensorPosition());
    list.add(present_sensorPosition);
    if (present_sensorPosition)
      list.add(sensorPosition);

    return list.hashCode();
  }

  @Override
  public int compareTo(SensorData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSensorUid()).compareTo(other.isSetSensorUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSensorUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorUid, other.sensorUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSensorType()).compareTo(other.isSetSensorType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSensorType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorType, other.sensorType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnit()).compareTo(other.isSetUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unit, other.unit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSensorPosition()).compareTo(other.isSetSensorPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSensorPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorPosition, other.sensorPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SensorData(");
    boolean first = true;

    sb.append("sensorUid:");
    if (this.sensorUid == null) {
      sb.append("null");
    } else {
      sb.append(this.sensorUid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sensorType:");
    if (this.sensorType == null) {
      sb.append("null");
    } else {
      sb.append(this.sensorType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unit:");
    if (this.unit == null) {
      sb.append("null");
    } else {
      sb.append(this.unit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    sb.append(this.value);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sensorPosition:");
    if (this.sensorPosition == null) {
      sb.append("null");
    } else {
      sb.append(this.sensorPosition);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
    if (sensorPosition != null) {
      sensorPosition.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SensorDataStandardSchemeFactory implements SchemeFactory {
    public SensorDataStandardScheme getScheme() {
      return new SensorDataStandardScheme();
    }
  }

  private static class SensorDataStandardScheme extends StandardScheme<SensorData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SensorData struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SENSOR_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sensorUid = iprot.readString();
              struct.setSensorUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SENSOR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sensorType = com.afarcloud.thrift.SensorType.findByValue(iprot.readI32());
              struct.setSensorTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unit = iprot.readString();
              struct.setUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.value = iprot.readDouble();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SENSOR_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sensorPosition = new Position();
              struct.sensorPosition.read(iprot);
              struct.setSensorPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SensorData struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sensorUid != null) {
        oprot.writeFieldBegin(SENSOR_UID_FIELD_DESC);
        oprot.writeString(struct.sensorUid);
        oprot.writeFieldEnd();
      }
      if (struct.sensorType != null) {
        oprot.writeFieldBegin(SENSOR_TYPE_FIELD_DESC);
        oprot.writeI32(struct.sensorType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.unit != null) {
        oprot.writeFieldBegin(UNIT_FIELD_DESC);
        oprot.writeString(struct.unit);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VALUE_FIELD_DESC);
      oprot.writeDouble(struct.value);
      oprot.writeFieldEnd();
      if (struct.sensorPosition != null) {
        oprot.writeFieldBegin(SENSOR_POSITION_FIELD_DESC);
        struct.sensorPosition.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SensorDataTupleSchemeFactory implements SchemeFactory {
    public SensorDataTupleScheme getScheme() {
      return new SensorDataTupleScheme();
    }
  }

  private static class SensorDataTupleScheme extends TupleScheme<SensorData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SensorData struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSensorUid()) {
        optionals.set(0);
      }
      if (struct.isSetSensorType()) {
        optionals.set(1);
      }
      if (struct.isSetUnit()) {
        optionals.set(2);
      }
      if (struct.isSetValue()) {
        optionals.set(3);
      }
      if (struct.isSetSensorPosition()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetSensorUid()) {
        oprot.writeString(struct.sensorUid);
      }
      if (struct.isSetSensorType()) {
        oprot.writeI32(struct.sensorType.getValue());
      }
      if (struct.isSetUnit()) {
        oprot.writeString(struct.unit);
      }
      if (struct.isSetValue()) {
        oprot.writeDouble(struct.value);
      }
      if (struct.isSetSensorPosition()) {
        struct.sensorPosition.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SensorData struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.sensorUid = iprot.readString();
        struct.setSensorUidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sensorType = com.afarcloud.thrift.SensorType.findByValue(iprot.readI32());
        struct.setSensorTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.unit = iprot.readString();
        struct.setUnitIsSet(true);
      }
      if (incoming.get(3)) {
        struct.value = iprot.readDouble();
        struct.setValueIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sensorPosition = new Position();
        struct.sensorPosition.read(iprot);
        struct.setSensorPositionIsSet(true);
      }
    }
  }

}

