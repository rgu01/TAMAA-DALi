<nta >
<declaration >// Place global declarations here.
const int AgentNum = 1;
typedef int[0,AgentNum-1] AgentScale;
const int TaskNum = 3;
const int EventNum = 0;
const int MilestoneNum = 3;
const int MaxIteration = 2;

bool position[AgentNum][MilestoneNum]={{false,false,false}};

const int BCET[AgentNum][TaskNum]={{0,2,3}};
const int WCET[AgentNum][TaskNum]={{0,4,6}};
const int RegularTaskNum[AgentNum] = {2};
chan move[AgentNum], initialize;

int iteration[AgentNum] = {0};

clock globalTime;

</declaration>
<template >
<name >Movement0</name>
<parameter >const AgentScale id</parameter>
<declaration >clock t;
</declaration>
<location id ="initial" x ="-500" y ="-300">
<name >initial</name>
<urgent  />
</location>
<location id ="P0" x ="-400" y ="-200">
<name >P0</name>
</location>
<location id ="F0T1" x ="-150" y ="-100">
<name >F0T1</name>
<label kind ="invariant">t&lt;=31</label>
</location>
<location id ="F0T2" x ="0" y ="-100">
<name >F0T2</name>
<label kind ="invariant">t&lt;=82</label>
</location>
<location id ="P1" x ="-250" y ="-50">
<name >P1</name>
</location>
<location id ="F1T0" x ="-300" y ="50">
<name >F1T0</name>
<label kind ="invariant">t&lt;=31</label>
</location>
<location id ="F1T2" x ="0" y ="50">
<name >F1T2</name>
<label kind ="invariant">t&lt;=57</label>
</location>
<location id ="P2" x ="-100" y ="100">
<name >P2</name>
</location>
<location id ="F2T0" x ="-300" y ="200">
<name >F2T0</name>
<label kind ="invariant">t&lt;=82</label>
</location>
<location id ="F2T1" x ="-150" y ="200">
<name >F2T1</name>
<label kind ="invariant">t&lt;=57</label>
</location>
<init ref ="initial" />
<transition >
<source ref ="initial" />
<target ref ="P0" />
<label kind ="assignment">position[id][0]=true</label>
</transition>
<transition >
<source ref ="P0" />
<target ref ="F0T1" />
<label kind ="assignment">t=0,position[id][0]=false</label>
<label kind ="synchronisation">move[id]?</label>
</transition>
<transition >
<source ref ="F0T1" />
<target ref ="P1" />
<label kind ="assignment">t=0,position[id][1]=true</label>
<label kind ="guard">t&gt;=31</label>
</transition>
<transition >
<source ref ="P0" />
<target ref ="F0T2" />
<label kind ="assignment">t=0,position[id][0]=false</label>
<label kind ="synchronisation">move[id]?</label>
</transition>
<transition >
<source ref ="F0T2" />
<target ref ="P2" />
<label kind ="assignment">t=0,position[id][2]=true</label>
<label kind ="guard">t&gt;=82</label>
</transition>
<transition >
<source ref ="P1" />
<target ref ="F1T0" />
<label kind ="assignment">t=0,position[id][1]=false</label>
<label kind ="synchronisation">move[id]?</label>
</transition>
<transition >
<source ref ="F1T0" />
<target ref ="P0" />
<label kind ="assignment">t=0,position[id][0]=true</label>
<label kind ="guard">t&gt;=31</label>
</transition>
<transition >
<source ref ="P1" />
<target ref ="F1T2" />
<label kind ="assignment">t=0,position[id][1]=false</label>
<label kind ="synchronisation">move[id]?</label>
</transition>
<transition >
<source ref ="F1T2" />
<target ref ="P2" />
<label kind ="assignment">t=0,position[id][2]=true</label>
<label kind ="guard">t&gt;=57</label>
</transition>
<transition >
<source ref ="P2" />
<target ref ="F2T0" />
<label kind ="assignment">t=0,position[id][2]=false</label>
<label kind ="synchronisation">move[id]?</label>
</transition>
<transition >
<source ref ="F2T0" />
<target ref ="P0" />
<label kind ="assignment">t=0,position[id][0]=true</label>
<label kind ="guard">t&gt;=82</label>
</transition>
<transition >
<source ref ="P2" />
<target ref ="F2T1" />
<label kind ="assignment">t=0,position[id][2]=false</label>
<label kind ="synchronisation">move[id]?</label>
</transition>
<transition >
<source ref ="F2T1" />
<target ref ="P1" />
<label kind ="assignment">t=0,position[id][1]=true</label>
<label kind ="guard">t&gt;=57</label>
</transition>
</template>
<template >
<name >TaskExecution0</name>
<parameter >const AgentScale id</parameter>
<declaration >clock t;
bool tf[TaskNum]={true,false,false};
bool ts[TaskNum]={true,false,false};

void updateIteration()
{
	int i=0;
	bool finish = true;
	for(i=1;i&lt;=RegularTaskNum[id];i++)
	{
		finish &amp;= tf[i];
	}
	if(finish)
	{
		for(i=1;i&lt;=RegularTaskNum[id];i++)
		{
			tf[i]=false;
		}
		
		iteration[id]+=1;
		if(iteration[id]==MaxIteration)
		{
			iteration[id]=0;
		}
	}
	else
	{
    	finish = true;
	}
}

</declaration>
<location id ="T0" x ="-400" y ="-200">
<name >T0</name>
</location>
<location id ="T1" x ="-400" y ="-500">
<name >T1</name>
<label kind ="invariant">t&lt;=4</label>
</location>
<location id ="T2" x ="-100" y ="-200">
<name >T2</name>
<label kind ="invariant">t&lt;=6</label>
</location>
<init ref ="T0" />
<transition >
<source ref ="T0" />
<target ref ="T0" />
<label kind ="synchronisation">move[id]!</label>
<label kind ="assignment">t=0</label>
</transition>
<transition >
<source ref ="T0" />
<target ref ="T1" />
<label kind ="assignment">t=0,ts[1]=true,tf[1]=false</label>
<label kind ="guard">position[id][1]</label>
</transition>
<transition >
<source ref ="T1" />
<target ref ="T0" />
<label kind ="assignment" x ="30" y ="-320">t=0,ts[1]=false,tf[1]=true,
updateIteration()</label>
<label kind ="guard" x ="0" y ="-350">t&gt;=2</label>
<nail x ="0" y ="-350" />
</transition>
<transition >
<source ref ="T0" />
<target ref ="T2" />
<label kind ="assignment">t=0,ts[2]=true,tf[2]=false</label>
<label kind ="guard">tf[1]&amp;&amp;(position[id][2])</label>
</transition>
<transition >
<source ref ="T2" />
<target ref ="T0" />
<label kind ="assignment" x ="-220" y ="-320">t=0,ts[2]=false,tf[2]=true,
updateIteration()</label>
<label kind ="guard" x ="-250" y ="-350">t&gt;=3</label>
<nail x ="-250" y ="-350" />
</transition>
</template>
<system >movement0 = Movement0(0);
taskExe0 = TaskExecution0(0);

system movement0, taskExe0;</system>
<queries >
<query >
<formula >E&lt;&gt;  iteration[0]&gt;=1</formula>
<comment >Task Coverage</comment>
</query>
</queries>
</nta>
