/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.afarcloud.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-9-30")
public class MmtService {

  public interface Iface {

    public void stateVectorUpdate(int requestId, StateVector stateVector) throws TException;

    public void sensorDataUpdate(int requestId, List<SensorData> sensorData) throws TException;

    public void sendPlan(int requestId, Mission plan) throws TException;

    public void sendError(int errorId, String errorMessage, int requestId) throws TException;

    public void sendMissionStatusReport(int missionId, TaskCommandStatus status) throws TException;

    public void sendTaskStatusReport(int missionId, int taskId, TaskCommandStatus status) throws TException;

    public void sendCommandStatusReport(int missionId, int commandId, TaskCommandStatus status) throws TException;

    public void sendAlarm(int missionId, Alarm alarm) throws TException;

    public String ping() throws TException;

  }

  public interface AsyncIface {

    public void stateVectorUpdate(int requestId, StateVector stateVector, AsyncMethodCallback resultHandler) throws TException;

    public void sensorDataUpdate(int requestId, List<SensorData> sensorData, AsyncMethodCallback resultHandler) throws TException;

    public void sendPlan(int requestId, Mission plan, AsyncMethodCallback resultHandler) throws TException;

    public void sendError(int errorId, String errorMessage, int requestId, AsyncMethodCallback resultHandler) throws TException;

    public void sendMissionStatusReport(int missionId, TaskCommandStatus status, AsyncMethodCallback resultHandler) throws TException;

    public void sendTaskStatusReport(int missionId, int taskId, TaskCommandStatus status, AsyncMethodCallback resultHandler) throws TException;

    public void sendCommandStatusReport(int missionId, int commandId, TaskCommandStatus status, AsyncMethodCallback resultHandler) throws TException;

    public void sendAlarm(int missionId, Alarm alarm, AsyncMethodCallback resultHandler) throws TException;

    public void ping(AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void stateVectorUpdate(int requestId, StateVector stateVector) throws TException
    {
      send_stateVectorUpdate(requestId, stateVector);
    }

    public void send_stateVectorUpdate(int requestId, StateVector stateVector) throws TException
    {
      stateVectorUpdate_args args = new stateVectorUpdate_args();
      args.setRequestId(requestId);
      args.setStateVector(stateVector);
      sendBase("stateVectorUpdate", args);
    }

    public void sensorDataUpdate(int requestId, List<SensorData> sensorData) throws TException
    {
      send_sensorDataUpdate(requestId, sensorData);
    }

    public void send_sensorDataUpdate(int requestId, List<SensorData> sensorData) throws TException
    {
      sensorDataUpdate_args args = new sensorDataUpdate_args();
      args.setRequestId(requestId);
      args.setSensorData(sensorData);
      sendBase("sensorDataUpdate", args);
    }

    public void sendPlan(int requestId, Mission plan) throws TException
    {
      send_sendPlan(requestId, plan);
    }

    public void send_sendPlan(int requestId, Mission plan) throws TException
    {
      sendPlan_args args = new sendPlan_args();
      args.setRequestId(requestId);
      args.setPlan(plan);
      sendBase("sendPlan", args);
    }

    public void sendError(int errorId, String errorMessage, int requestId) throws TException
    {
      send_sendError(errorId, errorMessage, requestId);
    }

    public void send_sendError(int errorId, String errorMessage, int requestId) throws TException
    {
      sendError_args args = new sendError_args();
      args.setErrorId(errorId);
      args.setErrorMessage(errorMessage);
      args.setRequestId(requestId);
      sendBase("sendError", args);
    }

    public void sendMissionStatusReport(int missionId, TaskCommandStatus status) throws TException
    {
      send_sendMissionStatusReport(missionId, status);
    }

    public void send_sendMissionStatusReport(int missionId, TaskCommandStatus status) throws TException
    {
      sendMissionStatusReport_args args = new sendMissionStatusReport_args();
      args.setMissionId(missionId);
      args.setStatus(status);
      sendBase("sendMissionStatusReport", args);
    }

    public void sendTaskStatusReport(int missionId, int taskId, TaskCommandStatus status) throws TException
    {
      send_sendTaskStatusReport(missionId, taskId, status);
    }

    public void send_sendTaskStatusReport(int missionId, int taskId, TaskCommandStatus status) throws TException
    {
      sendTaskStatusReport_args args = new sendTaskStatusReport_args();
      args.setMissionId(missionId);
      args.setTaskId(taskId);
      args.setStatus(status);
      sendBase("sendTaskStatusReport", args);
    }

    public void sendCommandStatusReport(int missionId, int commandId, TaskCommandStatus status) throws TException
    {
      send_sendCommandStatusReport(missionId, commandId, status);
    }

    public void send_sendCommandStatusReport(int missionId, int commandId, TaskCommandStatus status) throws TException
    {
      sendCommandStatusReport_args args = new sendCommandStatusReport_args();
      args.setMissionId(missionId);
      args.setCommandId(commandId);
      args.setStatus(status);
      sendBase("sendCommandStatusReport", args);
    }

    public void sendAlarm(int missionId, Alarm alarm) throws TException
    {
      send_sendAlarm(missionId, alarm);
    }

    public void send_sendAlarm(int missionId, Alarm alarm) throws TException
    {
      sendAlarm_args args = new sendAlarm_args();
      args.setMissionId(missionId);
      args.setAlarm(alarm);
      sendBase("sendAlarm", args);
    }

    public String ping() throws TException
    {
      send_ping();
      return recv_ping();
    }

    public void send_ping() throws TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public String recv_ping() throws TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void stateVectorUpdate(int requestId, StateVector stateVector, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      stateVectorUpdate_call method_call = new stateVectorUpdate_call(requestId, stateVector, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stateVectorUpdate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private StateVector stateVector;
      public stateVectorUpdate_call(int requestId, StateVector stateVector, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.requestId = requestId;
        this.stateVector = stateVector;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stateVectorUpdate", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        stateVectorUpdate_args args = new stateVectorUpdate_args();
        args.setRequestId(requestId);
        args.setStateVector(stateVector);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void sensorDataUpdate(int requestId, List<SensorData> sensorData, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      sensorDataUpdate_call method_call = new sensorDataUpdate_call(requestId, sensorData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sensorDataUpdate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private List<SensorData> sensorData;
      public sensorDataUpdate_call(int requestId, List<SensorData> sensorData, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.requestId = requestId;
        this.sensorData = sensorData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sensorDataUpdate", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        sensorDataUpdate_args args = new sensorDataUpdate_args();
        args.setRequestId(requestId);
        args.setSensorData(sensorData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void sendPlan(int requestId, Mission plan, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      sendPlan_call method_call = new sendPlan_call(requestId, plan, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendPlan_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private Mission plan;
      public sendPlan_call(int requestId, Mission plan, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.requestId = requestId;
        this.plan = plan;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendPlan", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        sendPlan_args args = new sendPlan_args();
        args.setRequestId(requestId);
        args.setPlan(plan);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void sendError(int errorId, String errorMessage, int requestId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      sendError_call method_call = new sendError_call(errorId, errorMessage, requestId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendError_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int errorId;
      private String errorMessage;
      private int requestId;
      public sendError_call(int errorId, String errorMessage, int requestId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.errorId = errorId;
        this.errorMessage = errorMessage;
        this.requestId = requestId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendError", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        sendError_args args = new sendError_args();
        args.setErrorId(errorId);
        args.setErrorMessage(errorMessage);
        args.setRequestId(requestId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void sendMissionStatusReport(int missionId, TaskCommandStatus status, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      sendMissionStatusReport_call method_call = new sendMissionStatusReport_call(missionId, status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendMissionStatusReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int missionId;
      private TaskCommandStatus status;
      public sendMissionStatusReport_call(int missionId, TaskCommandStatus status, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.missionId = missionId;
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendMissionStatusReport", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        sendMissionStatusReport_args args = new sendMissionStatusReport_args();
        args.setMissionId(missionId);
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void sendTaskStatusReport(int missionId, int taskId, TaskCommandStatus status, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      sendTaskStatusReport_call method_call = new sendTaskStatusReport_call(missionId, taskId, status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendTaskStatusReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int missionId;
      private int taskId;
      private TaskCommandStatus status;
      public sendTaskStatusReport_call(int missionId, int taskId, TaskCommandStatus status, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.missionId = missionId;
        this.taskId = taskId;
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendTaskStatusReport", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        sendTaskStatusReport_args args = new sendTaskStatusReport_args();
        args.setMissionId(missionId);
        args.setTaskId(taskId);
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void sendCommandStatusReport(int missionId, int commandId, TaskCommandStatus status, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      sendCommandStatusReport_call method_call = new sendCommandStatusReport_call(missionId, commandId, status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendCommandStatusReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int missionId;
      private int commandId;
      private TaskCommandStatus status;
      public sendCommandStatusReport_call(int missionId, int commandId, TaskCommandStatus status, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.missionId = missionId;
        this.commandId = commandId;
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendCommandStatusReport", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        sendCommandStatusReport_args args = new sendCommandStatusReport_args();
        args.setMissionId(missionId);
        args.setCommandId(commandId);
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void sendAlarm(int missionId, Alarm alarm, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      sendAlarm_call method_call = new sendAlarm_call(missionId, alarm, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendAlarm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int missionId;
      private Alarm alarm;
      public sendAlarm_call(int missionId, Alarm alarm, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.missionId = missionId;
        this.alarm = alarm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendAlarm", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        sendAlarm_args args = new sendAlarm_args();
        args.setMissionId(missionId);
        args.setAlarm(alarm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void ping(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      public ping_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("stateVectorUpdate", new stateVectorUpdate());
      processMap.put("sensorDataUpdate", new sensorDataUpdate());
      processMap.put("sendPlan", new sendPlan());
      processMap.put("sendError", new sendError());
      processMap.put("sendMissionStatusReport", new sendMissionStatusReport());
      processMap.put("sendTaskStatusReport", new sendTaskStatusReport());
      processMap.put("sendCommandStatusReport", new sendCommandStatusReport());
      processMap.put("sendAlarm", new sendAlarm());
      processMap.put("ping", new ping());
      return processMap;
    }

    public static class stateVectorUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stateVectorUpdate_args> {
      public stateVectorUpdate() {
        super("stateVectorUpdate");
      }

      public stateVectorUpdate_args getEmptyArgsInstance() {
        return new stateVectorUpdate_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, stateVectorUpdate_args args) throws TException {
        iface.stateVectorUpdate(args.requestId, args.stateVector);
        return null;
      }
    }

    public static class sensorDataUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sensorDataUpdate_args> {
      public sensorDataUpdate() {
        super("sensorDataUpdate");
      }

      public sensorDataUpdate_args getEmptyArgsInstance() {
        return new sensorDataUpdate_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, sensorDataUpdate_args args) throws TException {
        iface.sensorDataUpdate(args.requestId, args.sensorData);
        return null;
      }
    }

    public static class sendPlan<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendPlan_args> {
      public sendPlan() {
        super("sendPlan");
      }

      public sendPlan_args getEmptyArgsInstance() {
        return new sendPlan_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, sendPlan_args args) throws TException {
        iface.sendPlan(args.requestId, args.plan);
        return null;
      }
    }

    public static class sendError<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendError_args> {
      public sendError() {
        super("sendError");
      }

      public sendError_args getEmptyArgsInstance() {
        return new sendError_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, sendError_args args) throws TException {
        iface.sendError(args.errorId, args.errorMessage, args.requestId);
        return null;
      }
    }

    public static class sendMissionStatusReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendMissionStatusReport_args> {
      public sendMissionStatusReport() {
        super("sendMissionStatusReport");
      }

      public sendMissionStatusReport_args getEmptyArgsInstance() {
        return new sendMissionStatusReport_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, sendMissionStatusReport_args args) throws TException {
        iface.sendMissionStatusReport(args.missionId, args.status);
        return null;
      }
    }

    public static class sendTaskStatusReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendTaskStatusReport_args> {
      public sendTaskStatusReport() {
        super("sendTaskStatusReport");
      }

      public sendTaskStatusReport_args getEmptyArgsInstance() {
        return new sendTaskStatusReport_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, sendTaskStatusReport_args args) throws TException {
        iface.sendTaskStatusReport(args.missionId, args.taskId, args.status);
        return null;
      }
    }

    public static class sendCommandStatusReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendCommandStatusReport_args> {
      public sendCommandStatusReport() {
        super("sendCommandStatusReport");
      }

      public sendCommandStatusReport_args getEmptyArgsInstance() {
        return new sendCommandStatusReport_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, sendCommandStatusReport_args args) throws TException {
        iface.sendCommandStatusReport(args.missionId, args.commandId, args.status);
        return null;
      }
    }

    public static class sendAlarm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendAlarm_args> {
      public sendAlarm() {
        super("sendAlarm");
      }

      public sendAlarm_args getEmptyArgsInstance() {
        return new sendAlarm_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, sendAlarm_args args) throws TException {
        iface.sendAlarm(args.missionId, args.alarm);
        return null;
      }
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws TException {
        ping_result result = new ping_result();
        result.success = iface.ping();
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("stateVectorUpdate", new stateVectorUpdate());
      processMap.put("sensorDataUpdate", new sensorDataUpdate());
      processMap.put("sendPlan", new sendPlan());
      processMap.put("sendError", new sendError());
      processMap.put("sendMissionStatusReport", new sendMissionStatusReport());
      processMap.put("sendTaskStatusReport", new sendTaskStatusReport());
      processMap.put("sendCommandStatusReport", new sendCommandStatusReport());
      processMap.put("sendAlarm", new sendAlarm());
      processMap.put("ping", new ping());
      return processMap;
    }

    public static class stateVectorUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, stateVectorUpdate_args, Void> {
      public stateVectorUpdate() {
        super("stateVectorUpdate");
      }

      public stateVectorUpdate_args getEmptyArgsInstance() {
        return new stateVectorUpdate_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, stateVectorUpdate_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.stateVectorUpdate(args.requestId, args.stateVector,resultHandler);
      }
    }

    public static class sensorDataUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sensorDataUpdate_args, Void> {
      public sensorDataUpdate() {
        super("sensorDataUpdate");
      }

      public sensorDataUpdate_args getEmptyArgsInstance() {
        return new sensorDataUpdate_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, sensorDataUpdate_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sensorDataUpdate(args.requestId, args.sensorData,resultHandler);
      }
    }

    public static class sendPlan<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendPlan_args, Void> {
      public sendPlan() {
        super("sendPlan");
      }

      public sendPlan_args getEmptyArgsInstance() {
        return new sendPlan_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, sendPlan_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sendPlan(args.requestId, args.plan,resultHandler);
      }
    }

    public static class sendError<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendError_args, Void> {
      public sendError() {
        super("sendError");
      }

      public sendError_args getEmptyArgsInstance() {
        return new sendError_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, sendError_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sendError(args.errorId, args.errorMessage, args.requestId,resultHandler);
      }
    }

    public static class sendMissionStatusReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendMissionStatusReport_args, Void> {
      public sendMissionStatusReport() {
        super("sendMissionStatusReport");
      }

      public sendMissionStatusReport_args getEmptyArgsInstance() {
        return new sendMissionStatusReport_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, sendMissionStatusReport_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sendMissionStatusReport(args.missionId, args.status,resultHandler);
      }
    }

    public static class sendTaskStatusReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendTaskStatusReport_args, Void> {
      public sendTaskStatusReport() {
        super("sendTaskStatusReport");
      }

      public sendTaskStatusReport_args getEmptyArgsInstance() {
        return new sendTaskStatusReport_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, sendTaskStatusReport_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sendTaskStatusReport(args.missionId, args.taskId, args.status,resultHandler);
      }
    }

    public static class sendCommandStatusReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendCommandStatusReport_args, Void> {
      public sendCommandStatusReport() {
        super("sendCommandStatusReport");
      }

      public sendCommandStatusReport_args getEmptyArgsInstance() {
        return new sendCommandStatusReport_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, sendCommandStatusReport_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sendCommandStatusReport(args.missionId, args.commandId, args.status,resultHandler);
      }
    }

    public static class sendAlarm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendAlarm_args, Void> {
      public sendAlarm() {
        super("sendAlarm");
      }

      public sendAlarm_args getEmptyArgsInstance() {
        return new sendAlarm_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, sendAlarm_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sendAlarm(args.missionId, args.alarm,resultHandler);
      }
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, String> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            ping_result result = new ping_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ping_result result = new ping_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, AsyncMethodCallback<String> resultHandler) throws TException {
        iface.ping(resultHandler);
      }
    }

  }

  public static class stateVectorUpdate_args implements org.apache.thrift.TBase<stateVectorUpdate_args, stateVectorUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<stateVectorUpdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stateVectorUpdate_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STATE_VECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("stateVector", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stateVectorUpdate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stateVectorUpdate_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public StateVector stateVector; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      STATE_VECTOR((short)2, "stateVector");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // STATE_VECTOR
            return STATE_VECTOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STATE_VECTOR, new org.apache.thrift.meta_data.FieldMetaData("stateVector", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StateVector.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stateVectorUpdate_args.class, metaDataMap);
    }

    public stateVectorUpdate_args() {
    }

    public stateVectorUpdate_args(
      int requestId,
      StateVector stateVector)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.stateVector = stateVector;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stateVectorUpdate_args(stateVectorUpdate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetStateVector()) {
        this.stateVector = new StateVector(other.stateVector);
      }
    }

    public stateVectorUpdate_args deepCopy() {
      return new stateVectorUpdate_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.stateVector = null;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public stateVectorUpdate_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public StateVector getStateVector() {
      return this.stateVector;
    }

    public stateVectorUpdate_args setStateVector(StateVector stateVector) {
      this.stateVector = stateVector;
      return this;
    }

    public void unsetStateVector() {
      this.stateVector = null;
    }

    /** Returns true if field stateVector is set (has been assigned a value) and false otherwise */
    public boolean isSetStateVector() {
      return this.stateVector != null;
    }

    public void setStateVectorIsSet(boolean value) {
      if (!value) {
        this.stateVector = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case STATE_VECTOR:
        if (value == null) {
          unsetStateVector();
        } else {
          setStateVector((StateVector)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case STATE_VECTOR:
        return getStateVector();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case STATE_VECTOR:
        return isSetStateVector();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stateVectorUpdate_args)
        return this.equals((stateVectorUpdate_args)that);
      return false;
    }

    public boolean equals(stateVectorUpdate_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_stateVector = true && this.isSetStateVector();
      boolean that_present_stateVector = true && that.isSetStateVector();
      if (this_present_stateVector || that_present_stateVector) {
        if (!(this_present_stateVector && that_present_stateVector))
          return false;
        if (!this.stateVector.equals(that.stateVector))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_stateVector = true && (isSetStateVector());
      list.add(present_stateVector);
      if (present_stateVector)
        list.add(stateVector);

      return list.hashCode();
    }

    @Override
    public int compareTo(stateVectorUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStateVector()).compareTo(other.isSetStateVector());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStateVector()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stateVector, other.stateVector);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stateVectorUpdate_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stateVector:");
      if (this.stateVector == null) {
        sb.append("null");
      } else {
        sb.append(this.stateVector);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (stateVector != null) {
        stateVector.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stateVectorUpdate_argsStandardSchemeFactory implements SchemeFactory {
      public stateVectorUpdate_argsStandardScheme getScheme() {
        return new stateVectorUpdate_argsStandardScheme();
      }
    }

    private static class stateVectorUpdate_argsStandardScheme extends StandardScheme<stateVectorUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stateVectorUpdate_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATE_VECTOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.stateVector = new StateVector();
                struct.stateVector.read(iprot);
                struct.setStateVectorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stateVectorUpdate_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.stateVector != null) {
          oprot.writeFieldBegin(STATE_VECTOR_FIELD_DESC);
          struct.stateVector.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stateVectorUpdate_argsTupleSchemeFactory implements SchemeFactory {
      public stateVectorUpdate_argsTupleScheme getScheme() {
        return new stateVectorUpdate_argsTupleScheme();
      }
    }

    private static class stateVectorUpdate_argsTupleScheme extends TupleScheme<stateVectorUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stateVectorUpdate_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetStateVector()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetStateVector()) {
          struct.stateVector.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stateVectorUpdate_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stateVector = new StateVector();
          struct.stateVector.read(iprot);
          struct.setStateVectorIsSet(true);
        }
      }
    }

  }

  public static class sensorDataUpdate_args implements org.apache.thrift.TBase<sensorDataUpdate_args, sensorDataUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<sensorDataUpdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sensorDataUpdate_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SENSOR_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorData", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sensorDataUpdate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sensorDataUpdate_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public List<SensorData> sensorData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      SENSOR_DATA((short)2, "sensorData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // SENSOR_DATA
            return SENSOR_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SENSOR_DATA, new org.apache.thrift.meta_data.FieldMetaData("sensorData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sensorDataUpdate_args.class, metaDataMap);
    }

    public sensorDataUpdate_args() {
    }

    public sensorDataUpdate_args(
      int requestId,
      List<SensorData> sensorData)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.sensorData = sensorData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sensorDataUpdate_args(sensorDataUpdate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetSensorData()) {
        List<SensorData> __this__sensorData = new ArrayList<SensorData>(other.sensorData.size());
        for (SensorData other_element : other.sensorData) {
          __this__sensorData.add(new SensorData(other_element));
        }
        this.sensorData = __this__sensorData;
      }
    }

    public sensorDataUpdate_args deepCopy() {
      return new sensorDataUpdate_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.sensorData = null;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public sensorDataUpdate_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getSensorDataSize() {
      return (this.sensorData == null) ? 0 : this.sensorData.size();
    }

    public java.util.Iterator<SensorData> getSensorDataIterator() {
      return (this.sensorData == null) ? null : this.sensorData.iterator();
    }

    public void addToSensorData(SensorData elem) {
      if (this.sensorData == null) {
        this.sensorData = new ArrayList<SensorData>();
      }
      this.sensorData.add(elem);
    }

    public List<SensorData> getSensorData() {
      return this.sensorData;
    }

    public sensorDataUpdate_args setSensorData(List<SensorData> sensorData) {
      this.sensorData = sensorData;
      return this;
    }

    public void unsetSensorData() {
      this.sensorData = null;
    }

    /** Returns true if field sensorData is set (has been assigned a value) and false otherwise */
    public boolean isSetSensorData() {
      return this.sensorData != null;
    }

    public void setSensorDataIsSet(boolean value) {
      if (!value) {
        this.sensorData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case SENSOR_DATA:
        if (value == null) {
          unsetSensorData();
        } else {
          setSensorData((List<SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case SENSOR_DATA:
        return getSensorData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case SENSOR_DATA:
        return isSetSensorData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sensorDataUpdate_args)
        return this.equals((sensorDataUpdate_args)that);
      return false;
    }

    public boolean equals(sensorDataUpdate_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_sensorData = true && this.isSetSensorData();
      boolean that_present_sensorData = true && that.isSetSensorData();
      if (this_present_sensorData || that_present_sensorData) {
        if (!(this_present_sensorData && that_present_sensorData))
          return false;
        if (!this.sensorData.equals(that.sensorData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_sensorData = true && (isSetSensorData());
      list.add(present_sensorData);
      if (present_sensorData)
        list.add(sensorData);

      return list.hashCode();
    }

    @Override
    public int compareTo(sensorDataUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSensorData()).compareTo(other.isSetSensorData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSensorData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorData, other.sensorData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sensorDataUpdate_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sensorData:");
      if (this.sensorData == null) {
        sb.append("null");
      } else {
        sb.append(this.sensorData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sensorDataUpdate_argsStandardSchemeFactory implements SchemeFactory {
      public sensorDataUpdate_argsStandardScheme getScheme() {
        return new sensorDataUpdate_argsStandardScheme();
      }
    }

    private static class sensorDataUpdate_argsStandardScheme extends StandardScheme<sensorDataUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sensorDataUpdate_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SENSOR_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.sensorData = new ArrayList<SensorData>(_list112.size);
                  SensorData _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new SensorData();
                    _elem113.read(iprot);
                    struct.sensorData.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSensorDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sensorDataUpdate_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.sensorData != null) {
          oprot.writeFieldBegin(SENSOR_DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sensorData.size()));
            for (SensorData _iter115 : struct.sensorData)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sensorDataUpdate_argsTupleSchemeFactory implements SchemeFactory {
      public sensorDataUpdate_argsTupleScheme getScheme() {
        return new sensorDataUpdate_argsTupleScheme();
      }
    }

    private static class sensorDataUpdate_argsTupleScheme extends TupleScheme<sensorDataUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sensorDataUpdate_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetSensorData()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetSensorData()) {
          {
            oprot.writeI32(struct.sensorData.size());
            for (SensorData _iter116 : struct.sensorData)
            {
              _iter116.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sensorDataUpdate_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.sensorData = new ArrayList<SensorData>(_list117.size);
            SensorData _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = new SensorData();
              _elem118.read(iprot);
              struct.sensorData.add(_elem118);
            }
          }
          struct.setSensorDataIsSet(true);
        }
      }
    }

  }

  public static class sendPlan_args implements org.apache.thrift.TBase<sendPlan_args, sendPlan_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendPlan_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendPlan_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PLAN_FIELD_DESC = new org.apache.thrift.protocol.TField("plan", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendPlan_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendPlan_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public Mission plan; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      PLAN((short)2, "plan");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // PLAN
            return PLAN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PLAN, new org.apache.thrift.meta_data.FieldMetaData("plan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Mission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendPlan_args.class, metaDataMap);
    }

    public sendPlan_args() {
    }

    public sendPlan_args(
      int requestId,
      Mission plan)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.plan = plan;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendPlan_args(sendPlan_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetPlan()) {
        this.plan = new Mission(other.plan);
      }
    }

    public sendPlan_args deepCopy() {
      return new sendPlan_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.plan = null;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public sendPlan_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public Mission getPlan() {
      return this.plan;
    }

    public sendPlan_args setPlan(Mission plan) {
      this.plan = plan;
      return this;
    }

    public void unsetPlan() {
      this.plan = null;
    }

    /** Returns true if field plan is set (has been assigned a value) and false otherwise */
    public boolean isSetPlan() {
      return this.plan != null;
    }

    public void setPlanIsSet(boolean value) {
      if (!value) {
        this.plan = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case PLAN:
        if (value == null) {
          unsetPlan();
        } else {
          setPlan((Mission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case PLAN:
        return getPlan();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case PLAN:
        return isSetPlan();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendPlan_args)
        return this.equals((sendPlan_args)that);
      return false;
    }

    public boolean equals(sendPlan_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_plan = true && this.isSetPlan();
      boolean that_present_plan = true && that.isSetPlan();
      if (this_present_plan || that_present_plan) {
        if (!(this_present_plan && that_present_plan))
          return false;
        if (!this.plan.equals(that.plan))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_plan = true && (isSetPlan());
      list.add(present_plan);
      if (present_plan)
        list.add(plan);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendPlan_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlan()).compareTo(other.isSetPlan());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlan()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plan, other.plan);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendPlan_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("plan:");
      if (this.plan == null) {
        sb.append("null");
      } else {
        sb.append(this.plan);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (plan != null) {
        plan.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendPlan_argsStandardSchemeFactory implements SchemeFactory {
      public sendPlan_argsStandardScheme getScheme() {
        return new sendPlan_argsStandardScheme();
      }
    }

    private static class sendPlan_argsStandardScheme extends StandardScheme<sendPlan_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendPlan_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PLAN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.plan = new Mission();
                struct.plan.read(iprot);
                struct.setPlanIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendPlan_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.plan != null) {
          oprot.writeFieldBegin(PLAN_FIELD_DESC);
          struct.plan.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendPlan_argsTupleSchemeFactory implements SchemeFactory {
      public sendPlan_argsTupleScheme getScheme() {
        return new sendPlan_argsTupleScheme();
      }
    }

    private static class sendPlan_argsTupleScheme extends TupleScheme<sendPlan_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendPlan_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetPlan()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetPlan()) {
          struct.plan.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendPlan_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.plan = new Mission();
          struct.plan.read(iprot);
          struct.setPlanIsSet(true);
        }
      }
    }

  }

  public static class sendError_args implements org.apache.thrift.TBase<sendError_args, sendError_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendError_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendError_args");

    private static final org.apache.thrift.protocol.TField ERROR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("errorId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ERROR_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorMessage", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendError_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendError_argsTupleSchemeFactory());
    }

    public int errorId; // required
    public String errorMessage; // required
    public int requestId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERROR_ID((short)1, "errorId"),
      ERROR_MESSAGE((short)2, "errorMessage"),
      REQUEST_ID((short)3, "requestId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR_ID
            return ERROR_ID;
          case 2: // ERROR_MESSAGE
            return ERROR_MESSAGE;
          case 3: // REQUEST_ID
            return REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ERRORID_ISSET_ID = 0;
    private static final int __REQUESTID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR_ID, new org.apache.thrift.meta_data.FieldMetaData("errorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ERROR_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("errorMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendError_args.class, metaDataMap);
    }

    public sendError_args() {
    }

    public sendError_args(
      int errorId,
      String errorMessage,
      int requestId)
    {
      this();
      this.errorId = errorId;
      setErrorIdIsSet(true);
      this.errorMessage = errorMessage;
      this.requestId = requestId;
      setRequestIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendError_args(sendError_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.errorId = other.errorId;
      if (other.isSetErrorMessage()) {
        this.errorMessage = other.errorMessage;
      }
      this.requestId = other.requestId;
    }

    public sendError_args deepCopy() {
      return new sendError_args(this);
    }

    @Override
    public void clear() {
      setErrorIdIsSet(false);
      this.errorId = 0;
      this.errorMessage = null;
      setRequestIdIsSet(false);
      this.requestId = 0;
    }

    public int getErrorId() {
      return this.errorId;
    }

    public sendError_args setErrorId(int errorId) {
      this.errorId = errorId;
      setErrorIdIsSet(true);
      return this;
    }

    public void unsetErrorId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERRORID_ISSET_ID);
    }

    /** Returns true if field errorId is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorId() {
      return EncodingUtils.testBit(__isset_bitfield, __ERRORID_ISSET_ID);
    }

    public void setErrorIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERRORID_ISSET_ID, value);
    }

    public String getErrorMessage() {
      return this.errorMessage;
    }

    public sendError_args setErrorMessage(String errorMessage) {
      this.errorMessage = errorMessage;
      return this;
    }

    public void unsetErrorMessage() {
      this.errorMessage = null;
    }

    /** Returns true if field errorMessage is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorMessage() {
      return this.errorMessage != null;
    }

    public void setErrorMessageIsSet(boolean value) {
      if (!value) {
        this.errorMessage = null;
      }
    }

    public int getRequestId() {
      return this.requestId;
    }

    public sendError_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR_ID:
        if (value == null) {
          unsetErrorId();
        } else {
          setErrorId((Integer)value);
        }
        break;

      case ERROR_MESSAGE:
        if (value == null) {
          unsetErrorMessage();
        } else {
          setErrorMessage((String)value);
        }
        break;

      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR_ID:
        return Integer.valueOf(getErrorId());

      case ERROR_MESSAGE:
        return getErrorMessage();

      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR_ID:
        return isSetErrorId();
      case ERROR_MESSAGE:
        return isSetErrorMessage();
      case REQUEST_ID:
        return isSetRequestId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendError_args)
        return this.equals((sendError_args)that);
      return false;
    }

    public boolean equals(sendError_args that) {
      if (that == null)
        return false;

      boolean this_present_errorId = true;
      boolean that_present_errorId = true;
      if (this_present_errorId || that_present_errorId) {
        if (!(this_present_errorId && that_present_errorId))
          return false;
        if (this.errorId != that.errorId)
          return false;
      }

      boolean this_present_errorMessage = true && this.isSetErrorMessage();
      boolean that_present_errorMessage = true && that.isSetErrorMessage();
      if (this_present_errorMessage || that_present_errorMessage) {
        if (!(this_present_errorMessage && that_present_errorMessage))
          return false;
        if (!this.errorMessage.equals(that.errorMessage))
          return false;
      }

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_errorId = true;
      list.add(present_errorId);
      if (present_errorId)
        list.add(errorId);

      boolean present_errorMessage = true && (isSetErrorMessage());
      list.add(present_errorMessage);
      if (present_errorMessage)
        list.add(errorMessage);

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendError_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErrorId()).compareTo(other.isSetErrorId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErrorId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorId, other.errorId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErrorMessage()).compareTo(other.isSetErrorMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErrorMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorMessage, other.errorMessage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendError_args(");
      boolean first = true;

      sb.append("errorId:");
      sb.append(this.errorId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("errorMessage:");
      if (this.errorMessage == null) {
        sb.append("null");
      } else {
        sb.append(this.errorMessage);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendError_argsStandardSchemeFactory implements SchemeFactory {
      public sendError_argsStandardScheme getScheme() {
        return new sendError_argsStandardScheme();
      }
    }

    private static class sendError_argsStandardScheme extends StandardScheme<sendError_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendError_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERROR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.errorId = iprot.readI32();
                struct.setErrorIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERROR_MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.errorMessage = iprot.readString();
                struct.setErrorMessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendError_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ERROR_ID_FIELD_DESC);
        oprot.writeI32(struct.errorId);
        oprot.writeFieldEnd();
        if (struct.errorMessage != null) {
          oprot.writeFieldBegin(ERROR_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.errorMessage);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendError_argsTupleSchemeFactory implements SchemeFactory {
      public sendError_argsTupleScheme getScheme() {
        return new sendError_argsTupleScheme();
      }
    }

    private static class sendError_argsTupleScheme extends TupleScheme<sendError_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendError_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErrorId()) {
          optionals.set(0);
        }
        if (struct.isSetErrorMessage()) {
          optionals.set(1);
        }
        if (struct.isSetRequestId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetErrorId()) {
          oprot.writeI32(struct.errorId);
        }
        if (struct.isSetErrorMessage()) {
          oprot.writeString(struct.errorMessage);
        }
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendError_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.errorId = iprot.readI32();
          struct.setErrorIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.errorMessage = iprot.readString();
          struct.setErrorMessageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
      }
    }

  }

  public static class sendMissionStatusReport_args implements org.apache.thrift.TBase<sendMissionStatusReport_args, sendMissionStatusReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendMissionStatusReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMissionStatusReport_args");

    private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendMissionStatusReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendMissionStatusReport_argsTupleSchemeFactory());
    }

    public int missionId; // required
    /**
     * 
     * @see TaskCommandStatus
     */
    public TaskCommandStatus status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MISSION_ID((short)1, "missionId"),
      /**
       * 
       * @see TaskCommandStatus
       */
      STATUS((short)2, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MISSION_ID
            return MISSION_ID;
          case 2: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MISSIONID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TaskCommandStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMissionStatusReport_args.class, metaDataMap);
    }

    public sendMissionStatusReport_args() {
    }

    public sendMissionStatusReport_args(
      int missionId,
      TaskCommandStatus status)
    {
      this();
      this.missionId = missionId;
      setMissionIdIsSet(true);
      this.status = status;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMissionStatusReport_args(sendMissionStatusReport_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.missionId = other.missionId;
      if (other.isSetStatus()) {
        this.status = other.status;
      }
    }

    public sendMissionStatusReport_args deepCopy() {
      return new sendMissionStatusReport_args(this);
    }

    @Override
    public void clear() {
      setMissionIdIsSet(false);
      this.missionId = 0;
      this.status = null;
    }

    public int getMissionId() {
      return this.missionId;
    }

    public sendMissionStatusReport_args setMissionId(int missionId) {
      this.missionId = missionId;
      setMissionIdIsSet(true);
      return this;
    }

    public void unsetMissionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MISSIONID_ISSET_ID);
    }

    /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
    public boolean isSetMissionId() {
      return EncodingUtils.testBit(__isset_bitfield, __MISSIONID_ISSET_ID);
    }

    public void setMissionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MISSIONID_ISSET_ID, value);
    }

    /**
     * 
     * @see TaskCommandStatus
     */
    public TaskCommandStatus getStatus() {
      return this.status;
    }

    /**
     * 
     * @see TaskCommandStatus
     */
    public sendMissionStatusReport_args setStatus(TaskCommandStatus status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MISSION_ID:
        if (value == null) {
          unsetMissionId();
        } else {
          setMissionId((Integer)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((TaskCommandStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MISSION_ID:
        return Integer.valueOf(getMissionId());

      case STATUS:
        return getStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MISSION_ID:
        return isSetMissionId();
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMissionStatusReport_args)
        return this.equals((sendMissionStatusReport_args)that);
      return false;
    }

    public boolean equals(sendMissionStatusReport_args that) {
      if (that == null)
        return false;

      boolean this_present_missionId = true;
      boolean that_present_missionId = true;
      if (this_present_missionId || that_present_missionId) {
        if (!(this_present_missionId && that_present_missionId))
          return false;
        if (this.missionId != that.missionId)
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_missionId = true;
      list.add(present_missionId);
      if (present_missionId)
        list.add(missionId);

      boolean present_status = true && (isSetStatus());
      list.add(present_status);
      if (present_status)
        list.add(status.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(sendMissionStatusReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMissionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMissionStatusReport_args(");
      boolean first = true;

      sb.append("missionId:");
      sb.append(this.missionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendMissionStatusReport_argsStandardSchemeFactory implements SchemeFactory {
      public sendMissionStatusReport_argsStandardScheme getScheme() {
        return new sendMissionStatusReport_argsStandardScheme();
      }
    }

    private static class sendMissionStatusReport_argsStandardScheme extends StandardScheme<sendMissionStatusReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMissionStatusReport_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MISSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.missionId = iprot.readI32();
                struct.setMissionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = com.afarcloud.thrift.TaskCommandStatus.findByValue(iprot.readI32());
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMissionStatusReport_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
        oprot.writeI32(struct.missionId);
        oprot.writeFieldEnd();
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMissionStatusReport_argsTupleSchemeFactory implements SchemeFactory {
      public sendMissionStatusReport_argsTupleScheme getScheme() {
        return new sendMissionStatusReport_argsTupleScheme();
      }
    }

    private static class sendMissionStatusReport_argsTupleScheme extends TupleScheme<sendMissionStatusReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMissionStatusReport_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMissionId()) {
          optionals.set(0);
        }
        if (struct.isSetStatus()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMissionId()) {
          oprot.writeI32(struct.missionId);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMissionStatusReport_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.missionId = iprot.readI32();
          struct.setMissionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.status = com.afarcloud.thrift.TaskCommandStatus.findByValue(iprot.readI32());
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class sendTaskStatusReport_args implements org.apache.thrift.TBase<sendTaskStatusReport_args, sendTaskStatusReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendTaskStatusReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendTaskStatusReport_args");

    private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendTaskStatusReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendTaskStatusReport_argsTupleSchemeFactory());
    }

    public int missionId; // required
    public int taskId; // required
    /**
     * 
     * @see TaskCommandStatus
     */
    public TaskCommandStatus status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MISSION_ID((short)1, "missionId"),
      TASK_ID((short)2, "taskId"),
      /**
       * 
       * @see TaskCommandStatus
       */
      STATUS((short)3, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MISSION_ID
            return MISSION_ID;
          case 2: // TASK_ID
            return TASK_ID;
          case 3: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MISSIONID_ISSET_ID = 0;
    private static final int __TASKID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TaskCommandStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendTaskStatusReport_args.class, metaDataMap);
    }

    public sendTaskStatusReport_args() {
    }

    public sendTaskStatusReport_args(
      int missionId,
      int taskId,
      TaskCommandStatus status)
    {
      this();
      this.missionId = missionId;
      setMissionIdIsSet(true);
      this.taskId = taskId;
      setTaskIdIsSet(true);
      this.status = status;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendTaskStatusReport_args(sendTaskStatusReport_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.missionId = other.missionId;
      this.taskId = other.taskId;
      if (other.isSetStatus()) {
        this.status = other.status;
      }
    }

    public sendTaskStatusReport_args deepCopy() {
      return new sendTaskStatusReport_args(this);
    }

    @Override
    public void clear() {
      setMissionIdIsSet(false);
      this.missionId = 0;
      setTaskIdIsSet(false);
      this.taskId = 0;
      this.status = null;
    }

    public int getMissionId() {
      return this.missionId;
    }

    public sendTaskStatusReport_args setMissionId(int missionId) {
      this.missionId = missionId;
      setMissionIdIsSet(true);
      return this;
    }

    public void unsetMissionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MISSIONID_ISSET_ID);
    }

    /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
    public boolean isSetMissionId() {
      return EncodingUtils.testBit(__isset_bitfield, __MISSIONID_ISSET_ID);
    }

    public void setMissionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MISSIONID_ISSET_ID, value);
    }

    public int getTaskId() {
      return this.taskId;
    }

    public sendTaskStatusReport_args setTaskId(int taskId) {
      this.taskId = taskId;
      setTaskIdIsSet(true);
      return this;
    }

    public void unsetTaskId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    public void setTaskIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
    }

    /**
     * 
     * @see TaskCommandStatus
     */
    public TaskCommandStatus getStatus() {
      return this.status;
    }

    /**
     * 
     * @see TaskCommandStatus
     */
    public sendTaskStatusReport_args setStatus(TaskCommandStatus status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MISSION_ID:
        if (value == null) {
          unsetMissionId();
        } else {
          setMissionId((Integer)value);
        }
        break;

      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((Integer)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((TaskCommandStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MISSION_ID:
        return Integer.valueOf(getMissionId());

      case TASK_ID:
        return Integer.valueOf(getTaskId());

      case STATUS:
        return getStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MISSION_ID:
        return isSetMissionId();
      case TASK_ID:
        return isSetTaskId();
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendTaskStatusReport_args)
        return this.equals((sendTaskStatusReport_args)that);
      return false;
    }

    public boolean equals(sendTaskStatusReport_args that) {
      if (that == null)
        return false;

      boolean this_present_missionId = true;
      boolean that_present_missionId = true;
      if (this_present_missionId || that_present_missionId) {
        if (!(this_present_missionId && that_present_missionId))
          return false;
        if (this.missionId != that.missionId)
          return false;
      }

      boolean this_present_taskId = true;
      boolean that_present_taskId = true;
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (this.taskId != that.taskId)
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_missionId = true;
      list.add(present_missionId);
      if (present_missionId)
        list.add(missionId);

      boolean present_taskId = true;
      list.add(present_taskId);
      if (present_taskId)
        list.add(taskId);

      boolean present_status = true && (isSetStatus());
      list.add(present_status);
      if (present_status)
        list.add(status.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(sendTaskStatusReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMissionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendTaskStatusReport_args(");
      boolean first = true;

      sb.append("missionId:");
      sb.append(this.missionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskId:");
      sb.append(this.taskId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendTaskStatusReport_argsStandardSchemeFactory implements SchemeFactory {
      public sendTaskStatusReport_argsStandardScheme getScheme() {
        return new sendTaskStatusReport_argsStandardScheme();
      }
    }

    private static class sendTaskStatusReport_argsStandardScheme extends StandardScheme<sendTaskStatusReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendTaskStatusReport_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MISSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.missionId = iprot.readI32();
                struct.setMissionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.taskId = iprot.readI32();
                struct.setTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = com.afarcloud.thrift.TaskCommandStatus.findByValue(iprot.readI32());
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendTaskStatusReport_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
        oprot.writeI32(struct.missionId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI32(struct.taskId);
        oprot.writeFieldEnd();
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendTaskStatusReport_argsTupleSchemeFactory implements SchemeFactory {
      public sendTaskStatusReport_argsTupleScheme getScheme() {
        return new sendTaskStatusReport_argsTupleScheme();
      }
    }

    private static class sendTaskStatusReport_argsTupleScheme extends TupleScheme<sendTaskStatusReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendTaskStatusReport_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMissionId()) {
          optionals.set(0);
        }
        if (struct.isSetTaskId()) {
          optionals.set(1);
        }
        if (struct.isSetStatus()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMissionId()) {
          oprot.writeI32(struct.missionId);
        }
        if (struct.isSetTaskId()) {
          oprot.writeI32(struct.taskId);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendTaskStatusReport_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.missionId = iprot.readI32();
          struct.setMissionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.taskId = iprot.readI32();
          struct.setTaskIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.status = com.afarcloud.thrift.TaskCommandStatus.findByValue(iprot.readI32());
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class sendCommandStatusReport_args implements org.apache.thrift.TBase<sendCommandStatusReport_args, sendCommandStatusReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendCommandStatusReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendCommandStatusReport_args");

    private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COMMAND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("commandId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendCommandStatusReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendCommandStatusReport_argsTupleSchemeFactory());
    }

    public int missionId; // required
    public int commandId; // required
    /**
     * 
     * @see TaskCommandStatus
     */
    public TaskCommandStatus status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MISSION_ID((short)1, "missionId"),
      COMMAND_ID((short)2, "commandId"),
      /**
       * 
       * @see TaskCommandStatus
       */
      STATUS((short)3, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MISSION_ID
            return MISSION_ID;
          case 2: // COMMAND_ID
            return COMMAND_ID;
          case 3: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MISSIONID_ISSET_ID = 0;
    private static final int __COMMANDID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COMMAND_ID, new org.apache.thrift.meta_data.FieldMetaData("commandId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TaskCommandStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendCommandStatusReport_args.class, metaDataMap);
    }

    public sendCommandStatusReport_args() {
    }

    public sendCommandStatusReport_args(
      int missionId,
      int commandId,
      TaskCommandStatus status)
    {
      this();
      this.missionId = missionId;
      setMissionIdIsSet(true);
      this.commandId = commandId;
      setCommandIdIsSet(true);
      this.status = status;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendCommandStatusReport_args(sendCommandStatusReport_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.missionId = other.missionId;
      this.commandId = other.commandId;
      if (other.isSetStatus()) {
        this.status = other.status;
      }
    }

    public sendCommandStatusReport_args deepCopy() {
      return new sendCommandStatusReport_args(this);
    }

    @Override
    public void clear() {
      setMissionIdIsSet(false);
      this.missionId = 0;
      setCommandIdIsSet(false);
      this.commandId = 0;
      this.status = null;
    }

    public int getMissionId() {
      return this.missionId;
    }

    public sendCommandStatusReport_args setMissionId(int missionId) {
      this.missionId = missionId;
      setMissionIdIsSet(true);
      return this;
    }

    public void unsetMissionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MISSIONID_ISSET_ID);
    }

    /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
    public boolean isSetMissionId() {
      return EncodingUtils.testBit(__isset_bitfield, __MISSIONID_ISSET_ID);
    }

    public void setMissionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MISSIONID_ISSET_ID, value);
    }

    public int getCommandId() {
      return this.commandId;
    }

    public sendCommandStatusReport_args setCommandId(int commandId) {
      this.commandId = commandId;
      setCommandIdIsSet(true);
      return this;
    }

    public void unsetCommandId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMANDID_ISSET_ID);
    }

    /** Returns true if field commandId is set (has been assigned a value) and false otherwise */
    public boolean isSetCommandId() {
      return EncodingUtils.testBit(__isset_bitfield, __COMMANDID_ISSET_ID);
    }

    public void setCommandIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMANDID_ISSET_ID, value);
    }

    /**
     * 
     * @see TaskCommandStatus
     */
    public TaskCommandStatus getStatus() {
      return this.status;
    }

    /**
     * 
     * @see TaskCommandStatus
     */
    public sendCommandStatusReport_args setStatus(TaskCommandStatus status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MISSION_ID:
        if (value == null) {
          unsetMissionId();
        } else {
          setMissionId((Integer)value);
        }
        break;

      case COMMAND_ID:
        if (value == null) {
          unsetCommandId();
        } else {
          setCommandId((Integer)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((TaskCommandStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MISSION_ID:
        return Integer.valueOf(getMissionId());

      case COMMAND_ID:
        return Integer.valueOf(getCommandId());

      case STATUS:
        return getStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MISSION_ID:
        return isSetMissionId();
      case COMMAND_ID:
        return isSetCommandId();
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendCommandStatusReport_args)
        return this.equals((sendCommandStatusReport_args)that);
      return false;
    }

    public boolean equals(sendCommandStatusReport_args that) {
      if (that == null)
        return false;

      boolean this_present_missionId = true;
      boolean that_present_missionId = true;
      if (this_present_missionId || that_present_missionId) {
        if (!(this_present_missionId && that_present_missionId))
          return false;
        if (this.missionId != that.missionId)
          return false;
      }

      boolean this_present_commandId = true;
      boolean that_present_commandId = true;
      if (this_present_commandId || that_present_commandId) {
        if (!(this_present_commandId && that_present_commandId))
          return false;
        if (this.commandId != that.commandId)
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_missionId = true;
      list.add(present_missionId);
      if (present_missionId)
        list.add(missionId);

      boolean present_commandId = true;
      list.add(present_commandId);
      if (present_commandId)
        list.add(commandId);

      boolean present_status = true && (isSetStatus());
      list.add(present_status);
      if (present_status)
        list.add(status.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(sendCommandStatusReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMissionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommandId()).compareTo(other.isSetCommandId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommandId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commandId, other.commandId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendCommandStatusReport_args(");
      boolean first = true;

      sb.append("missionId:");
      sb.append(this.missionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("commandId:");
      sb.append(this.commandId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendCommandStatusReport_argsStandardSchemeFactory implements SchemeFactory {
      public sendCommandStatusReport_argsStandardScheme getScheme() {
        return new sendCommandStatusReport_argsStandardScheme();
      }
    }

    private static class sendCommandStatusReport_argsStandardScheme extends StandardScheme<sendCommandStatusReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendCommandStatusReport_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MISSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.missionId = iprot.readI32();
                struct.setMissionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMAND_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.commandId = iprot.readI32();
                struct.setCommandIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = com.afarcloud.thrift.TaskCommandStatus.findByValue(iprot.readI32());
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendCommandStatusReport_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
        oprot.writeI32(struct.missionId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMMAND_ID_FIELD_DESC);
        oprot.writeI32(struct.commandId);
        oprot.writeFieldEnd();
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendCommandStatusReport_argsTupleSchemeFactory implements SchemeFactory {
      public sendCommandStatusReport_argsTupleScheme getScheme() {
        return new sendCommandStatusReport_argsTupleScheme();
      }
    }

    private static class sendCommandStatusReport_argsTupleScheme extends TupleScheme<sendCommandStatusReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendCommandStatusReport_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMissionId()) {
          optionals.set(0);
        }
        if (struct.isSetCommandId()) {
          optionals.set(1);
        }
        if (struct.isSetStatus()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMissionId()) {
          oprot.writeI32(struct.missionId);
        }
        if (struct.isSetCommandId()) {
          oprot.writeI32(struct.commandId);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendCommandStatusReport_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.missionId = iprot.readI32();
          struct.setMissionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.commandId = iprot.readI32();
          struct.setCommandIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.status = com.afarcloud.thrift.TaskCommandStatus.findByValue(iprot.readI32());
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class sendAlarm_args implements org.apache.thrift.TBase<sendAlarm_args, sendAlarm_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendAlarm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendAlarm_args");

    private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ALARM_FIELD_DESC = new org.apache.thrift.protocol.TField("alarm", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendAlarm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendAlarm_argsTupleSchemeFactory());
    }

    public int missionId; // required
    public Alarm alarm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MISSION_ID((short)1, "missionId"),
      ALARM((short)2, "alarm");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MISSION_ID
            return MISSION_ID;
          case 2: // ALARM
            return ALARM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MISSIONID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ALARM, new org.apache.thrift.meta_data.FieldMetaData("alarm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Alarm.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendAlarm_args.class, metaDataMap);
    }

    public sendAlarm_args() {
    }

    public sendAlarm_args(
      int missionId,
      Alarm alarm)
    {
      this();
      this.missionId = missionId;
      setMissionIdIsSet(true);
      this.alarm = alarm;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendAlarm_args(sendAlarm_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.missionId = other.missionId;
      if (other.isSetAlarm()) {
        this.alarm = new Alarm(other.alarm);
      }
    }

    public sendAlarm_args deepCopy() {
      return new sendAlarm_args(this);
    }

    @Override
    public void clear() {
      setMissionIdIsSet(false);
      this.missionId = 0;
      this.alarm = null;
    }

    public int getMissionId() {
      return this.missionId;
    }

    public sendAlarm_args setMissionId(int missionId) {
      this.missionId = missionId;
      setMissionIdIsSet(true);
      return this;
    }

    public void unsetMissionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MISSIONID_ISSET_ID);
    }

    /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
    public boolean isSetMissionId() {
      return EncodingUtils.testBit(__isset_bitfield, __MISSIONID_ISSET_ID);
    }

    public void setMissionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MISSIONID_ISSET_ID, value);
    }

    public Alarm getAlarm() {
      return this.alarm;
    }

    public sendAlarm_args setAlarm(Alarm alarm) {
      this.alarm = alarm;
      return this;
    }

    public void unsetAlarm() {
      this.alarm = null;
    }

    /** Returns true if field alarm is set (has been assigned a value) and false otherwise */
    public boolean isSetAlarm() {
      return this.alarm != null;
    }

    public void setAlarmIsSet(boolean value) {
      if (!value) {
        this.alarm = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MISSION_ID:
        if (value == null) {
          unsetMissionId();
        } else {
          setMissionId((Integer)value);
        }
        break;

      case ALARM:
        if (value == null) {
          unsetAlarm();
        } else {
          setAlarm((Alarm)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MISSION_ID:
        return Integer.valueOf(getMissionId());

      case ALARM:
        return getAlarm();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MISSION_ID:
        return isSetMissionId();
      case ALARM:
        return isSetAlarm();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendAlarm_args)
        return this.equals((sendAlarm_args)that);
      return false;
    }

    public boolean equals(sendAlarm_args that) {
      if (that == null)
        return false;

      boolean this_present_missionId = true;
      boolean that_present_missionId = true;
      if (this_present_missionId || that_present_missionId) {
        if (!(this_present_missionId && that_present_missionId))
          return false;
        if (this.missionId != that.missionId)
          return false;
      }

      boolean this_present_alarm = true && this.isSetAlarm();
      boolean that_present_alarm = true && that.isSetAlarm();
      if (this_present_alarm || that_present_alarm) {
        if (!(this_present_alarm && that_present_alarm))
          return false;
        if (!this.alarm.equals(that.alarm))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_missionId = true;
      list.add(present_missionId);
      if (present_missionId)
        list.add(missionId);

      boolean present_alarm = true && (isSetAlarm());
      list.add(present_alarm);
      if (present_alarm)
        list.add(alarm);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendAlarm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMissionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAlarm()).compareTo(other.isSetAlarm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAlarm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarm, other.alarm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendAlarm_args(");
      boolean first = true;

      sb.append("missionId:");
      sb.append(this.missionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("alarm:");
      if (this.alarm == null) {
        sb.append("null");
      } else {
        sb.append(this.alarm);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (alarm != null) {
        alarm.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendAlarm_argsStandardSchemeFactory implements SchemeFactory {
      public sendAlarm_argsStandardScheme getScheme() {
        return new sendAlarm_argsStandardScheme();
      }
    }

    private static class sendAlarm_argsStandardScheme extends StandardScheme<sendAlarm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendAlarm_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MISSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.missionId = iprot.readI32();
                struct.setMissionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ALARM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.alarm = new Alarm();
                struct.alarm.read(iprot);
                struct.setAlarmIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendAlarm_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
        oprot.writeI32(struct.missionId);
        oprot.writeFieldEnd();
        if (struct.alarm != null) {
          oprot.writeFieldBegin(ALARM_FIELD_DESC);
          struct.alarm.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendAlarm_argsTupleSchemeFactory implements SchemeFactory {
      public sendAlarm_argsTupleScheme getScheme() {
        return new sendAlarm_argsTupleScheme();
      }
    }

    private static class sendAlarm_argsTupleScheme extends TupleScheme<sendAlarm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendAlarm_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMissionId()) {
          optionals.set(0);
        }
        if (struct.isSetAlarm()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMissionId()) {
          oprot.writeI32(struct.missionId);
        }
        if (struct.isSetAlarm()) {
          struct.alarm.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendAlarm_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.missionId = iprot.readI32();
          struct.setMissionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.alarm = new Alarm();
          struct.alarm.read(iprot);
          struct.setAlarmIsSet(true);
        }
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public ping_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
